{
	"Version": "2019-10-30",
	"StartAction": "87859db2-400d-410b-8818-05c8ae4869aa",
	"Metadata": {
		"entryPointPosition": {
			"x": -1896,
			"y": 231.2
		},
		"ActionMetadata": {
			"Amount Choice Timeout": {
				"position": {
					"x": -682.4,
					"y": -324.8
				},
				"isFriendlyName": true
			},
			"Speak Minimum Payment": {
				"position": {
					"x": -170.4,
					"y": -35.2
				},
				"isFriendlyName": true
			},
			"Payment Amount Timeout": {
				"position": {
					"x": -153.6,
					"y": -653.6
				},
				"isFriendlyName": true
			},
			"Payment Too Large": {
				"position": {
					"x": 138.4,
					"y": -688.8
				},
				"isFriendlyName": true
			},
			"Payment Too Small": {
				"position": {
					"x": 378.4,
					"y": -691.2
				},
				"isFriendlyName": true
			},
			"b2786200-e897-45bd-b888-0f53246f72ed": {
				"position": {
					"x": -748.8,
					"y": 534.4
				}
			},
			"Amount Choice Input Not Recognized": {
				"position": {
					"x": -416,
					"y": -337.6
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout": {
				"position": {
					"x": 3752,
					"y": -92
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout Check": {
				"position": {
					"x": 3996,
					"y": -147.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "784624c8-ba0c-4593-999e-3e62277b014d",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Try Routing Number Again": {
				"position": {
					"x": 3879.2,
					"y": 354.4
				},
				"isFriendlyName": true
			},
			"Get Routing Number": {
				"position": {
					"x": 3841.6,
					"y": 131.2
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Account Number Timeout": {
				"position": {
					"x": 2944,
					"y": -92.8
				},
				"isFriendlyName": true
			},
			"Account Number Timeout Check": {
				"position": {
					"x": 3188.8,
					"y": -72.8
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "75f1fedf-8cbc-4915-8909-e69004ae44d5",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Card Number Timeout": {
				"position": {
					"x": 2892,
					"y": -1114.4
				},
				"isFriendlyName": true
			},
			"Try Expiration Date Again": {
				"position": {
					"x": 3928,
					"y": -489.6
				},
				"isFriendlyName": true
			},
			"Card Number Timeout Check": {
				"position": {
					"x": 3020.8,
					"y": -892
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "7b45c992-552a-4fdc-9d69-f7e165baa350",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Payment Method Timeout": {
				"position": {
					"x": 2208,
					"y": -267.2
				},
				"isFriendlyName": true
			},
			"Check for Minimum Payment": {
				"position": {
					"x": -723.2,
					"y": 153.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "4603710f-21bb-4ca2-9425-a71d54c01463",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "PaymentAmountDue"
					},
					{
						"id": "2054e3e0-b8cb-459f-bae2-b5d8dbc9d0d8",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "0"
					}
				]
			},
			"Set Payment Method to Card": {
				"position": {
					"x": 2674.4,
					"y": -698.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Set Payment Method to Bank": {
				"position": {
					"x": 2748.8,
					"y": 111.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Speak Amount": {
				"position": {
					"x": -960.8,
					"y": 145.6
				},
				"isFriendlyName": true
			},
			"Record Payment Request ID": {
				"position": {
					"x": -1256.8,
					"y": 152.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Prompt for Payment Amount Choice": {
				"position": {
					"x": -479.2,
					"y": -38.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "0476d47b-c661-4308-9946-649088e8ec98",
						"value": "1"
					},
					{
						"id": "d1359699-65d5-4cf0-b9ea-e1571c824f88",
						"value": "2"
					}
				]
			},
			"Check Payment Amount": {
				"position": {
					"x": 9.6,
					"y": -431.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "91870e06-2f0d-4d61-ae6e-8b7be1bfdce9",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					},
					{
						"id": "8ae37e50-fef0-4895-a4a2-0c9436a7d64f",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "$.Attributes.PaymentAmountDue"
					},
					{
						"id": "9936ba4c-f67d-4d26-8879-0d0f7daa314a",
						"operator": {
							"name": "Is less than",
							"value": "LessThan",
							"shortDisplay": "<"
						},
						"value": "$.Attributes.PaymentMinimumPayment"
					}
				]
			},
			"Use Card Again?": {
				"position": {
					"x": 1292,
					"y": -718.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "11bbe6aa-6d39-4c51-b490-a5bcd78746b6",
						"value": "1"
					},
					{
						"id": "b50ca638-28b0-4fc2-8ec8-9bbc560a539f",
						"value": "2"
					}
				]
			},
			"Use Bank Account Again?": {
				"position": {
					"x": 1412,
					"y": -396
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "58eb4a8a-b8ac-443f-9d89-b99220d661fb",
						"value": "1"
					},
					{
						"id": "0716af72-0982-4520-b9bd-52c9e6cbd06e",
						"value": "2"
					}
				]
			},
			"Use Payment Method Again Timeout": {
				"position": {
					"x": 1083.2,
					"y": -928.8
				},
				"isFriendlyName": true
			},
			"Check Last Payment Method": {
				"position": {
					"x": 1000,
					"y": -67.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "1accf896-b6a6-40cf-a1da-7f5549155d6a",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Card"
					},
					{
						"id": "e543d172-951c-4343-be33-2901104a597c",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Bank"
					}
				]
			},
			"Ask for Payment Method": {
				"position": {
					"x": 2230.4,
					"y": -29.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "0b306c25-22f9-47b5-805e-4f1c6eaca7cf",
						"value": "1"
					},
					{
						"id": "10d1b7a2-1b79-491b-b854-ba130fb109ac",
						"value": "2"
					}
				]
			},
			"Method Input Not Recognized": {
				"position": {
					"x": 2427.2,
					"y": -340
				},
				"isFriendlyName": true
			},
			"Expiration Date Timeout Check": {
				"position": {
					"x": 3968.8,
					"y": -901.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "7c34a73d-428b-46f2-8ee6-370b3bfa3f02",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Get Expiration Date": {
				"position": {
					"x": 3865.6,
					"y": -704.8
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Expiration Date Timeout": {
				"position": {
					"x": 3832,
					"y": -1107.2
				},
				"isFriendlyName": true
			},
			"Payment Submission Error": {
				"position": {
					"x": 5879.2,
					"y": 396.8
				},
				"isFriendlyName": true
			},
			"Payment Validation Error": {
				"position": {
					"x": 5888,
					"y": 638.4
				},
				"isFriendlyName": true
			},
			"Get Payment Amount": {
				"position": {
					"x": 60.8,
					"y": -46.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Store Encrypted Account Number": {
				"position": {
					"x": 3212.8,
					"y": 131.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedAccountNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedAccountNumber"]
			},
			"Store Encrypted Card Number": {
				"position": {
					"x": 3148,
					"y": -687.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedCardNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedCardNumber"]
			},
			"Get & Encrypt Card Number": {
				"position": {
					"x": 2899.2,
					"y": -692.8
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Get & Encrypt Account Number": {
				"position": {
					"x": 2976,
					"y": 114.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Set Payment Amount to Full Amount": {
				"position": {
					"x": 468,
					"y": 447.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"PaymentAmount": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["PaymentAmount"]
			},
			"Set Payment Amount to Entered Amount": {
				"position": {
					"x": 452,
					"y": -34.4
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"PaymentAmount": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["PaymentAmount"]
			},
			"Store Routing Number": {
				"position": {
					"x": 4120,
					"y": 112
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"RoutingNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["RoutingNumber"]
			},
			"Store Expiration Date": {
				"position": {
					"x": 4127.2,
					"y": -695.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"ExpirationDate": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["ExpirationDate"]
			},
			"Receipt Success": {
				"position": {
					"x": 6968,
					"y": -394.4
				},
				"isFriendlyName": true
			},
			"Receipt Error": {
				"position": {
					"x": 6972.8,
					"y": -193.6
				},
				"isFriendlyName": true
			},
			"Remove Failed Payment Token and Method": {
				"position": {
					"x": 6164,
					"y": 548.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Internal Error": {
				"position": {
					"x": 2711.2,
					"y": 773.6
				},
				"isFriendlyName": true
			},
			"Tokenize Transaction": {
				"position": {
					"x": 4592.8,
					"y": -138.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<tokenizeTransactionLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Speak Validation Error": {
				"position": {
					"x": 5042.4,
					"y": 401.6
				},
				"isFriendlyName": true
			},
			"Check for Tokenize Error": {
				"position": {
					"x": 4841.6,
					"y": -133.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "cbc854ed-e2c0-4eaa-ae30-eb62c5bba65c",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Record Token": {
				"position": {
					"x": 5072.8,
					"y": -132.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Submit Payment": {
				"position": {
					"x": 5556,
					"y": -128.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<submitPaymentLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Record Transaction ID": {
				"position": {
					"x": 5796,
					"y": -130.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"a3ea896e-4f43-4677-8edd-159f677dc41e": {
				"position": {
					"x": 8300,
					"y": 228.8
				}
			},
			"Payment Request Error": {
				"position": {
					"x": -992,
					"y": 535.2
				},
				"isFriendlyName": true
			},
			"Receipt Entry Not Recognized": {
				"position": {
					"x": 6892,
					"y": 193.6
				},
				"isFriendlyName": true
			},
			"Receipt Timeout": {
				"position": {
					"x": 6979.2,
					"y": 405.6
				},
				"isFriendlyName": true
			},
			"Transfer Error": {
				"position": {
					"x": 8064,
					"y": 8
				},
				"isFriendlyName": true
			},
			"Transfer to Representative": {
				"position": {
					"x": 7876,
					"y": -234.4
				},
				"isFriendlyName": true
			},
			"Redact Sensitive Contact Attributes Copy": {
				"position": {
					"x": 7436.8,
					"y": -60.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Set Queue": {
				"position": {
					"x": 7660,
					"y": -63.2
				},
				"isFriendlyName": true,
				"parameters": {
					"QueueId": {
						"useDynamic": true
					}
				},
				"useDynamic": true
			},
			"Email Receipt": {
				"position": {
					"x": 6724,
					"y": -307.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<emailReceiptLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Payment Success": {
				"position": {
					"x": 6239.2,
					"y": -44.8
				},
				"isFriendlyName": true
			},
			"Ask to Transfer for Receipt": {
				"position": {
					"x": 7094.4,
					"y": 92.8
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "326589b4-71db-43c1-bc01-4d3476f7636a",
						"value": "1"
					},
					{
						"id": "05f0f002-3070-4dc6-82df-aed977426b42",
						"value": "2"
					}
				]
			},
			"Redact Sensitive Contact Attributes": {
				"position": {
					"x": 7395.2,
					"y": 252.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Check for Customer Email": {
				"position": {
					"x": 6460.8,
					"y": -43.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "a57943af-ac08-4040-874b-229fbc37bbb5",
						"operator": {
							"name": "Contains",
							"value": "Contains",
							"shortDisplay": "contains"
						},
						"value": "@"
					}
				]
			},
			"Has Specified Receipt Queue": {
				"position": {
					"x": 6719.2,
					"y": -28
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "71224776-6f52-4bd9-973d-ac8fc101633d",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Create Payment Request": {
				"position": {
					"x": -1484,
					"y": 224
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<createPaymentRequestLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"87859db2-400d-410b-8818-05c8ae4869aa": {
				"position": {
					"x": -1924,
					"y": 356
				}
			},
			"Set Receipt Queue ID": {
				"position": {
					"x": -1711.2,
					"y": 214.4
				},
				"isFriendlyName": true
			}
		},
		"Annotations": [
			{
				"type": "default",
				"id": "3488450f-b48c-41aa-a37e-e3b430d5f199",
				"content": "This needs to be done because a \"user-defined\" value for the \"Set Working Queue\" block type doesn't seem to work?",
				"actionId": "Set Receipt Queue ID",
				"isFolded": true,
				"position": {
					"x": -2119.8333333333335,
					"y": 474.66666666666663
				},
				"size": {
					"height": 295,
					"width": 300
				}
			}
		],
		"name": "C3 Payment IVR Flow Module",
		"description": "Flow module to collect payments through a self-service IVR using C3.",
		"status": "published",
		"hash": {}
	},
	"Actions": [
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Amount Choice Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Prompt for Payment Amount Choice",
				"Errors": [
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "You are permitted to make a partial payment of at least $$.Attributes.PaymentMinimumPayment."
			},
			"Identifier": "Speak Minimum Payment",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Payment Amount",
				"Errors": [
					{
						"NextAction": "Get Payment Amount",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Payment Amount Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "The entered amount of $$.StoredCustomerInput exceeds the total amount due of $$.Attributes.PaymentAmountDue. Please try again with a smaller amount."
			},
			"Identifier": "Payment Too Large",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "The entered amount of $$.StoredCustomerInput is less than the minimum payment of $$.Attributes.PaymentMinimumPayment. Please try again with a larger amount."
			},
			"Identifier": "Payment Too Small",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "b2786200-e897-45bd-b888-0f53246f72ed",
			"Type": "EndFlowModuleExecution",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "Your entry was not recognized. Please try again."
			},
			"Identifier": "Amount Choice Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Prompt for Payment Amount Choice",
				"Errors": [
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Routing Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Routing Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Routing Number",
				"Conditions": [
					{
						"NextAction": "Routing Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Routing Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your bank routing number. Please check your entry and try again."
			},
			"Identifier": "Try Routing Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank's routing number, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				}
			},
			"Identifier": "Get Routing Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Routing Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Routing Number Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Account Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Account Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Account Number",
				"Conditions": [
					{
						"NextAction": "Account Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Account Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Card Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your expiration date. Please check your entry and try again."
			},
			"Identifier": "Try Expiration Date Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Card Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Card Number",
				"Conditions": [
					{
						"NextAction": "Card Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Card Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Payment Method Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentMinimumPayment"
			},
			"Identifier": "Check for Minimum Payment",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["PaymentAmountDue"]
						}
					},
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["0"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Card"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Card",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Bank"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Bank",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "A payment has been requested for the amount of $$.Attributes.PaymentAmountDue."
			},
			"Identifier": "Speak Amount",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Minimum Payment",
				"Errors": [
					{
						"NextAction": "Check for Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentRequestId": "$.External.PaymentRequestId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Payment Request ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Speak Amount",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To pay the amount in full, press 1.\nTo pay a partial amount, press 2."
			},
			"Identifier": "Prompt for Payment Amount Choice",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Amount Choice Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Set Payment Amount to Full Amount",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Speak Minimum Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Amount Choice Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Amount Choice Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Amount Choice Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Check Payment Amount",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Set Payment Amount to Entered Amount",
				"Conditions": [
					{
						"NextAction": "Payment Amount Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					},
					{
						"NextAction": "Payment Too Large",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["$.Attributes.PaymentAmountDue"]
						}
					},
					{
						"NextAction": "Payment Too Small",
						"Condition": {
							"Operator": "NumberLessThan",
							"Operands": ["$.Attributes.PaymentMinimumPayment"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Set Payment Amount to Entered Amount",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "You previously paid with a credit or debit card.\n\nIf you would like to use this card again for this payment, press 1.\nTo use a different payment method, press 2."
			},
			"Identifier": "Use Card Again?",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Submit Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Use Payment Method Again Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "You previously paid with a bank account.\n\nIf you would like to use this account again for this payment, press 1.\nTo use a different payment method, press 2."
			},
			"Identifier": "Use Bank Account Again?",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Submit Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Use Payment Method Again Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Use Payment Method Again Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check Last Payment Method",
				"Errors": [
					{
						"NextAction": "Check Last Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentMethod"
			},
			"Identifier": "Check Last Payment Method",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Use Card Again?",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Card"]
						}
					},
					{
						"NextAction": "Use Bank Account Again?",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Bank"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To pay with a credit or debit card, press 1.\nTo pay directly with your bank account, press 2."
			},
			"Identifier": "Ask for Payment Method",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Method Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Set Payment Method to Card",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Set Payment Method to Bank",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Payment Method Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Method Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Method Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your entry was not recognized. Please try again."
			},
			"Identifier": "Method Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Expiration Date Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Expiration Date",
				"Conditions": [
					{
						"NextAction": "Expiration Date Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Expiration Date",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "Please enter your card's expiration date in the format month-month-year-year, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				}
			},
			"Identifier": "Get Expiration Date",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Expiration Date Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Expiration Date Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Expiration Date Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occured preventing us from submitting your payment. You have not been charged."
			},
			"Identifier": "Payment Submission Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem validating your $.Attributes.PaymentMethod information."
			},
			"Identifier": "Payment Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "Please enter the amount you would like to pay in whole dollars, followed by the pound key.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				}
			},
			"Identifier": "Get Payment Amount",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Check Payment Amount",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedAccountNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Account Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Card Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your card number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Card Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Card Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank account number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Account Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Account Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentAmount": "$.Customer.Attributes.PaymentAmountDue"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Amount to Full Amount",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Check Last Payment Method",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentAmount": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Amount to Entered Amount",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Check Last Payment Method",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"RoutingNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Routing Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"ExpirationDate": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Expiration Date",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "A receipt has been sent to your email address, $.Attributes.['Email']."
			},
			"Identifier": "Receipt Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error sending the receipt to your email address, $.Attributes.['Email']. Please contact customer support to receive a receipt for this transaction."
			},
			"Identifier": "Receipt Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "NULL",
					"PaymentMethod": "NULL"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Remove Failed Payment Token and Method",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occurred that prevents us from collecting the payment."
			},
			"Identifier": "Internal Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<tokenizeTransactionLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Tokenize Transaction",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Tokenize Error",
				"Errors": [
					{
						"NextAction": "Payment Validation Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "The payment failed because of the following error:\n\n$.External.Error"
			},
			"Identifier": "Speak Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.Error"
			},
			"Identifier": "Check for Tokenize Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Speak Validation Error",
				"Conditions": [
					{
						"NextAction": "Record Token",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Speak Validation Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "$.External.PaymentToken"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Token",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Submit Payment",
				"Errors": [
					{
						"NextAction": "Submit Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<submitPaymentLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Submit Payment",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Transaction ID",
				"Errors": [
					{
						"NextAction": "Payment Submission Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"TransactionId": "$.External.TransactionId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Transaction ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Payment Success",
				"Errors": [
					{
						"NextAction": "Payment Success",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "a3ea896e-4f43-4677-8edd-159f677dc41e",
			"Type": "EndFlowModuleExecution",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "There was an error creating the payment request."
			},
			"Identifier": "Payment Request Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "b2786200-e897-45bd-b888-0f53246f72ed",
				"Errors": [
					{
						"NextAction": "b2786200-e897-45bd-b888-0f53246f72ed",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your entry was not recognized. Please try again."
			},
			"Identifier": "Receipt Entry Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask to Transfer for Receipt",
				"Errors": [
					{
						"NextAction": "Ask to Transfer for Receipt",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Receipt Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask to Transfer for Receipt",
				"Errors": [
					{
						"NextAction": "Ask to Transfer for Receipt",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "An error prevented us from connecting you to a representative. Please try calling the customer service number directly in order to receive a receipt."
			},
			"Identifier": "Transfer Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
				"Errors": [
					{
						"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "Transfer to Representative",
			"Type": "TransferContactToQueue",
			"Transitions": {
				"NextAction": "Transfer Error",
				"Errors": [
					{
						"NextAction": "Transfer Error",
						"ErrorType": "QueueAtCapacity"
					},
					{
						"NextAction": "Transfer Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"EncryptedAccountNumber": "REDACTED",
					"ExpirationDate": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes Copy",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Set Queue",
				"Errors": [
					{
						"NextAction": "Set Queue",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"QueueId": "$.FlowAttributes.ReceiptQueueId"
			},
			"Identifier": "Set Queue",
			"Type": "UpdateContactTargetQueue",
			"Transitions": {
				"NextAction": "Transfer to Representative",
				"Errors": [
					{
						"NextAction": "Transfer Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<emailReceiptLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Email Receipt",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Success",
				"Errors": [
					{
						"NextAction": "Receipt Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your payment was processed successfully."
			},
			"Identifier": "Payment Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Customer Email",
				"Errors": [
					{
						"NextAction": "Check for Customer Email",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To transfer to a representative and receive a receipt for your payment, press 1.\nTo continue without a receipt, press 2."
			},
			"Identifier": "Ask to Transfer for Receipt",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Receipt Entry Not Recognized",
				"Conditions": [
					{
						"NextAction": "Redact Sensitive Contact Attributes Copy",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Receipt Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Receipt Entry Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Receipt Entry Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"EncryptedAccountNumber": "REDACTED",
					"ExpirationDate": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
				"Errors": [
					{
						"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.Email"
			},
			"Identifier": "Check for Customer Email",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Has Specified Receipt Queue",
				"Conditions": [
					{
						"NextAction": "Email Receipt",
						"Condition": {
							"Operator": "TextContains",
							"Operands": ["@"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Has Specified Receipt Queue",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.FlowAttributes.ReceiptQueueId"
			},
			"Identifier": "Has Specified Receipt Queue",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask to Transfer for Receipt",
				"Conditions": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask to Transfer for Receipt",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<createPaymentRequestLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Create Payment Request",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Payment Request ID",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"FlowLoggingBehavior": "Disabled"
			},
			"Identifier": "87859db2-400d-410b-8818-05c8ae4869aa",
			"Type": "UpdateFlowLoggingBehavior",
			"Transitions": {
				"NextAction": "Set Receipt Queue ID"
			}
		},
		{
			"Parameters": {
				"FlowAttributes": {
					"ReceiptQueueId": {
						"Value": "<<receiptQueueId>>"
					}
				}
			},
			"Identifier": "Set Receipt Queue ID",
			"Type": "UpdateFlowAttributes",
			"Transitions": {
				"NextAction": "Create Payment Request",
				"Errors": [
					{
						"NextAction": "Create Payment Request",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		}
	],
	"Settings": {
		"InputParameters": [],
		"OutputParameters": [],
		"Transitions": [
			{
				"DisplayName": "Success",
				"ReferenceName": "Success",
				"Description": ""
			},
			{
				"DisplayName": "Error",
				"ReferenceName": "Error",
				"Description": ""
			}
		]
	}
}
