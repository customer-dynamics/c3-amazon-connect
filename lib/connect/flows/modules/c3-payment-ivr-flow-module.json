{
	"Version": "2019-10-30",
	"StartAction": "87859db2-400d-410b-8818-05c8ae4869aa",
	"Metadata": {
		"entryPointPosition": {
			"x": -1896,
			"y": 231.2
		},
		"ActionMetadata": {
			"b2786200-e897-45bd-b888-0f53246f72ed": {
				"position": {
					"x": -748.8,
					"y": 534.4
				}
			},
			"Payment Request Error": {
				"position": {
					"x": -992,
					"y": 535.2
				},
				"isFriendlyName": true
			},
			"Record Payment Request ID": {
				"position": {
					"x": -1256.8,
					"y": 152.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Speak Amount": {
				"position": {
					"x": -960.8,
					"y": 145.6
				},
				"isFriendlyName": true
			},
			"Payment Amount Timeout": {
				"position": {
					"x": -154.4,
					"y": -654.4
				},
				"isFriendlyName": true
			},
			"Payment Too Large": {
				"position": {
					"x": 138.4,
					"y": -688.8
				},
				"isFriendlyName": true
			},
			"Payment Too Small": {
				"position": {
					"x": 377.6,
					"y": -692.8
				},
				"isFriendlyName": true
			},
			"Payment Method Timeout": {
				"position": {
					"x": 2208,
					"y": -267.2
				},
				"isFriendlyName": true
			},
			"Method Input Not Recognized": {
				"position": {
					"x": 2424.8,
					"y": -341.6
				},
				"isFriendlyName": true
			},
			"Check Payment Amount": {
				"position": {
					"x": 9.6,
					"y": -431.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "fd85ae0c-761e-477a-a903-c60be59f19b2",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					},
					{
						"id": "dda339a4-3e72-41dd-b23a-0e81c79e2c02",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "$.Attributes.PaymentAmountDue"
					},
					{
						"id": "b8e601b8-ef37-4622-834f-9c33d6ec3431",
						"operator": {
							"name": "Is less than",
							"value": "LessThan",
							"shortDisplay": "<"
						},
						"value": "$.Attributes.PaymentMinimumPayment"
					}
				]
			},
			"Use Payment Method Again Timeout": {
				"position": {
					"x": 1083.2,
					"y": -928.8
				},
				"isFriendlyName": true
			},
			"Ask for Payment Method": {
				"position": {
					"x": 2230.4,
					"y": -29.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "a1b44467-8dc3-41ae-a076-b7573266dd9e",
						"value": "1"
					},
					{
						"id": "7ae762e7-4c10-4df9-8bc9-b03a0848d9be",
						"value": "2"
					}
				]
			},
			"Check Last Payment Method": {
				"position": {
					"x": 1000,
					"y": -67.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "9d2ed26f-65bd-4a09-b62e-b560dbe80470",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Card"
					},
					{
						"id": "d78e50db-b98a-4f3a-852b-f317815dbae7",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Bank"
					}
				]
			},
			"Amount Choice Timeout": {
				"position": {
					"x": -682.4,
					"y": -324.8
				},
				"isFriendlyName": true
			},
			"Amount Choice Input Not Recognized": {
				"position": {
					"x": -416,
					"y": -337.6
				},
				"isFriendlyName": true
			},
			"Check for Minimum Payment": {
				"position": {
					"x": -723.2,
					"y": 153.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "7b75863f-d40e-4950-b8f9-8df26b7fd194",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "PaymentAmountDue"
					},
					{
						"id": "9540321b-d370-4dfe-b4c2-0acb9c9a8519",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "0"
					}
				]
			},
			"Speak Minimum Payment": {
				"position": {
					"x": -171.2,
					"y": -36
				},
				"isFriendlyName": true
			},
			"Prompt for Payment Amount Choice": {
				"position": {
					"x": -479.2,
					"y": -38.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "ae86370c-0191-47ef-ae97-842c5178bffd",
						"value": "1"
					},
					{
						"id": "d39f581a-1695-4a03-9c72-65c6a0cc969a",
						"value": "2"
					}
				]
			},
			"Set Payment Method to Bank": {
				"position": {
					"x": 2692,
					"y": 112
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Account Number Timeout": {
				"position": {
					"x": 2841.6,
					"y": -343.2
				},
				"isFriendlyName": true
			},
			"Set Payment Method to Card": {
				"position": {
					"x": 2685.6,
					"y": -802.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Card Number Timeout": {
				"position": {
					"x": 2823.2,
					"y": -1230.4
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout": {
				"position": {
					"x": 4033.6,
					"y": -120
				},
				"isFriendlyName": true
			},
			"Try Routing Number Again": {
				"position": {
					"x": 4159.2,
					"y": 325.6
				},
				"isFriendlyName": true
			},
			"Expiration Date Timeout": {
				"position": {
					"x": 4112.8,
					"y": -1136
				},
				"isFriendlyName": true
			},
			"Try Expiration Date Again": {
				"position": {
					"x": 4209.6,
					"y": -517.6
				},
				"isFriendlyName": true
			},
			"Get Expiration Date": {
				"position": {
					"x": 4147.2,
					"y": -732.8
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Check for Customer Email": {
				"position": {
					"x": 7265.6,
					"y": -209.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "2639bb5c-9e77-44cf-b60c-fde92ef0bfa1",
						"operator": {
							"name": "Contains",
							"value": "Contains",
							"shortDisplay": "contains"
						},
						"value": "@"
					}
				]
			},
			"Redact Sensitive Contact Attributes Copy": {
				"position": {
					"x": 8241.6,
					"y": -227.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Has Specified Receipt Queue": {
				"position": {
					"x": 7524,
					"y": -194.4
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "955629e2-84e7-4971-8623-38f2283b4575",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Receipt Timeout": {
				"position": {
					"x": 7784,
					"y": 239.2
				},
				"isFriendlyName": true
			},
			"Receipt Entry Not Recognized": {
				"position": {
					"x": 7696,
					"y": 25.6
				},
				"isFriendlyName": true
			},
			"Ask to Transfer for Receipt": {
				"position": {
					"x": 7899.2,
					"y": -73.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "15559498-1c12-407c-bfc0-a2848f8af90a",
						"value": "1"
					},
					{
						"id": "fbac5968-af64-4f19-85ca-bc16114be4f5",
						"value": "2"
					}
				]
			},
			"Receipt Success": {
				"position": {
					"x": 7772.8,
					"y": -560.8
				},
				"isFriendlyName": true
			},
			"Send Receipt": {
				"position": {
					"x": 7528.8,
					"y": -473.6
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendReceiptLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Receipt Error": {
				"position": {
					"x": 7777.6,
					"y": -360
				},
				"isFriendlyName": true
			},
			"a3ea896e-4f43-4677-8edd-159f677dc41e": {
				"position": {
					"x": 9224,
					"y": 204.8
				}
			},
			"Transfer to Representative": {
				"position": {
					"x": 8680.8,
					"y": -400.8
				},
				"isFriendlyName": true
			},
			"Set Queue": {
				"position": {
					"x": 8464.8,
					"y": -229.6
				},
				"isFriendlyName": true,
				"parameters": {
					"QueueId": {
						"useDynamic": true
					}
				},
				"useDynamic": true
			},
			"Transfer Error": {
				"position": {
					"x": 8868.8,
					"y": -158.4
				},
				"isFriendlyName": true
			},
			"87859db2-400d-410b-8818-05c8ae4869aa": {
				"position": {
					"x": -1924,
					"y": 356
				}
			},
			"Create Payment Request": {
				"position": {
					"x": -1484,
					"y": 224
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<createPaymentRequestLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Set Receipt Queue ID": {
				"position": {
					"x": -1711.2,
					"y": 214.4
				},
				"isFriendlyName": true
			},
			"Card Number Timeout Check": {
				"position": {
					"x": 3020,
					"y": -1027.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "2a0aa3bc-36be-4551-9263-3ef8be766e48",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Card Number Validation Error": {
				"position": {
					"x": 3257.6,
					"y": -574.4
				},
				"isFriendlyName": true
			},
			"Validate Card Number": {
				"position": {
					"x": 3139.2,
					"y": -808
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<validateEntryLambdaArn>>"
					},
					"LambdaInvocationAttributes": {
						"CustomerEntry": {
							"useDynamic": true
						}
					}
				},
				"dynamicMetadata": {
					"ValidationType": false,
					"CustomerEntry": true
				}
			},
			"Check for Card Number Validation Error": {
				"position": {
					"x": 3349.6,
					"y": -880.8
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "e31074b1-ad7c-49d4-8f31-f3375934803e",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Account Number Timeout Check": {
				"position": {
					"x": 3056,
					"y": -96
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "cb18b702-554a-4931-8188-613002fe9512",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Account Number Validation Error": {
				"position": {
					"x": 3209.6,
					"y": 318.4
				},
				"isFriendlyName": true
			},
			"Get Routing Number": {
				"position": {
					"x": 4123.2,
					"y": 103.2
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Validate Account Number": {
				"position": {
					"x": 3138.4,
					"y": 99.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<validateEntryLambdaArn>>"
					},
					"LambdaInvocationAttributes": {
						"CustomerEntry": {
							"useDynamic": true
						}
					}
				},
				"dynamicMetadata": {
					"ValidationType": false,
					"CustomerEntry": true
				}
			},
			"Check for Account Number Validation Error": {
				"position": {
					"x": 3349.6,
					"y": 18.4
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "1bbed8cc-0825-47ce-a01e-359bcd7bafe4",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Routing Number Validation Error": {
				"position": {
					"x": 4427.2,
					"y": 306.4
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout Check": {
				"position": {
					"x": 4277.6,
					"y": -175.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "866bfece-4fbb-4b40-9ada-ae2cefe4adef",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Check for Routing Number Validation Error": {
				"position": {
					"x": 4576,
					"y": 1.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "626cd832-5cab-4d1b-a95a-525ddc7f005f",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Validate Routing Number": {
				"position": {
					"x": 4356,
					"y": 87.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<validateEntryLambdaArn>>"
					},
					"LambdaInvocationAttributes": {
						"CustomerEntry": {
							"useDynamic": true
						}
					}
				},
				"dynamicMetadata": {
					"ValidationType": false,
					"CustomerEntry": true
				}
			},
			"Expiration Date Validation Error": {
				"position": {
					"x": 4470.4,
					"y": -520
				},
				"isFriendlyName": true
			},
			"Expiration Date Timeout Check": {
				"position": {
					"x": 4193.6,
					"y": -932.8
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "19360143-9684-4ced-9236-b7f21348ea80",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Check for Expiration Date Validation Error": {
				"position": {
					"x": 4612,
					"y": -796
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "35a74577-c32c-4f43-8e5a-71f6d417b409",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Validate Expiration Date": {
				"position": {
					"x": 4398.4,
					"y": -740
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<validateEntryLambdaArn>>"
					},
					"LambdaInvocationAttributes": {
						"CustomerEntry": {
							"useDynamic": true
						}
					}
				},
				"dynamicMetadata": {
					"ValidationType": false,
					"CustomerEntry": true
				}
			},
			"Get Payment Amount": {
				"position": {
					"x": 60.8,
					"y": -46.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Set Payment Amount to Entered Amount": {
				"position": {
					"x": 452,
					"y": -34.4
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"PaymentAmount": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["PaymentAmount"]
			},
			"Set Payment Amount to Full Amount": {
				"position": {
					"x": 468,
					"y": 447.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"PaymentAmount": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["PaymentAmount"]
			},
			"Get & Encrypt Account Number": {
				"position": {
					"x": 2915.2,
					"y": 106.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Get & Encrypt Card Number": {
				"position": {
					"x": 2907.2,
					"y": -807.2
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Redact Sensitive Contact Attributes": {
				"position": {
					"x": 8200,
					"y": 86.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Store Encrypted Card Number": {
				"position": {
					"x": 3570.4,
					"y": -817.6
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedCardNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedCardNumber"]
			},
			"Store Encrypted Account Number": {
				"position": {
					"x": 3565.6,
					"y": 100.8
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedAccountNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedAccountNumber"]
			},
			"Store Routing Number": {
				"position": {
					"x": 4786.4,
					"y": 88
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"RoutingNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["RoutingNumber"]
			},
			"Store Expiration Date": {
				"position": {
					"x": 4842.4,
					"y": -732.8
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"ExpirationDate": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["ExpirationDate"]
			},
			"Internal Error": {
				"position": {
					"x": 2711.2,
					"y": 773.6
				},
				"isFriendlyName": true
			},
			"Speak Validation Error": {
				"position": {
					"x": 5846.4,
					"y": 234.4
				},
				"isFriendlyName": true
			},
			"Check for Tokenize Error": {
				"position": {
					"x": 5646.4,
					"y": -300
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "53fc169a-3e46-4423-8ac5-ed28a91d5e07",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Payment Success": {
				"position": {
					"x": 7044,
					"y": -211.2
				},
				"isFriendlyName": true
			},
			"Tokenize Transaction": {
				"position": {
					"x": 5397.6,
					"y": -304.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<tokenizeTransactionLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Payment Validation Error": {
				"position": {
					"x": 6692.8,
					"y": 472
				},
				"isFriendlyName": true
			},
			"Record Transaction Attributes": {
				"position": {
					"x": 6752,
					"y": -297.6
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Speak Payment Submission Error": {
				"position": {
					"x": 6681.6,
					"y": 228
				},
				"isFriendlyName": true
			},
			"Use Card Again?": {
				"position": {
					"x": 1289.6,
					"y": -720
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "b7084099-987d-4302-b3dd-49b40896d542",
						"value": "1"
					},
					{
						"id": "ddcc2892-4532-4a41-8b81-d90a405cc4b4",
						"value": "2"
					}
				]
			},
			"Use Bank Account Again?": {
				"position": {
					"x": 1410.4,
					"y": -397.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "eb9e0008-c722-4f4b-9a8d-5cafcc856677",
						"value": "1"
					},
					{
						"id": "cfd9f4a0-3bab-4801-a989-0a12a65de35f",
						"value": "2"
					}
				]
			},
			"Record Token": {
				"position": {
					"x": 5877.6,
					"y": -299.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Check for Submit Payment Error": {
				"position": {
					"x": 6531.2,
					"y": -299.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "d0791a3b-a82c-496b-9c87-35c929119af1",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "NULL"
					}
				]
			},
			"Remove Failed Payment Token and Method": {
				"position": {
					"x": 6968.8,
					"y": 382.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Submit Payment": {
				"position": {
					"x": 6295.2,
					"y": -303.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<submitPaymentLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Speak Payment Submission Unknown Error": {
				"position": {
					"x": 6431.2,
					"y": 13.6
				},
				"isFriendlyName": true
			}
		},
		"Annotations": [
			{
				"type": "default",
				"id": "3488450f-b48c-41aa-a37e-e3b430d5f199",
				"content": "This needs to be done because a user-defined value for the Set Working Queue block type doesn't seem to work?",
				"actionId": "Set Receipt Queue ID",
				"isFolded": true,
				"position": {
					"x": -2119.8333333333335,
					"y": 474.66666666666663
				},
				"size": {
					"height": 295,
					"width": 300
				}
			},
			{
				"type": "default",
				"id": "30896f26-80a4-4a84-83e8-6712da1ad3c4",
				"content": "Validation here is \"nice to have\", so we'll still continue with the payment if something fails.",
				"actionId": "Validate Card Number",
				"isFolded": true,
				"position": {
					"x": 3943.1666666666665,
					"y": -803.3333333333334
				},
				"size": {
					"height": 295,
					"width": 300
				}
			},
			{
				"type": "default",
				"id": "01393aca-125f-4461-90b2-13317765d772",
				"content": "Validation here is \"nice to have\", so we'll still continue with the payment if something fails.",
				"actionId": "Validate Account Number",
				"isFolded": true,
				"position": {
					"x": 3942.1666666666665,
					"y": 330.66666666666663
				},
				"size": {
					"height": 295,
					"width": 300
				}
			},
			{
				"type": "default",
				"id": "cf95cc49-f2ab-494d-8bae-d3adc7364cf1",
				"content": "Validation here is \"nice to have\", so we'll still continue with the payment if something fails.",
				"actionId": "Validate Routing Number",
				"isFolded": true,
				"position": {
					"x": 5464.166666666667,
					"y": 315.66666666666663
				},
				"size": {
					"height": 295,
					"width": 300
				}
			},
			{
				"type": "default",
				"id": "16690976-613d-48f1-9262-4d98cd97a333",
				"content": "Validation here is \"nice to have\", so we'll still continue with the payment if something fails.",
				"actionId": "Validate Expiration Date",
				"isFolded": true,
				"position": {
					"x": 5517.166666666667,
					"y": -718.3333333333334
				},
				"size": {
					"height": 295,
					"width": 300
				}
			}
		],
		"name": "C3 Payment IVR Flow Module",
		"description": "Flow module to collect payments through a self-service IVR using C3.",
		"status": "published",
		"hash": {}
	},
	"Actions": [
		{
			"Parameters": {},
			"Identifier": "b2786200-e897-45bd-b888-0f53246f72ed",
			"Type": "EndFlowModuleExecution",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThere was an error creating the payment request.\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Request Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "b2786200-e897-45bd-b888-0f53246f72ed",
				"Errors": [
					{
						"NextAction": "b2786200-e897-45bd-b888-0f53246f72ed",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentRequestId": "$.External.PaymentRequestId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Payment Request ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Speak Amount",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nA payment has been requested for the amount of $$.Attributes.PaymentAmountDue.\n</prosody>\n</speak>"
			},
			"Identifier": "Speak Amount",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Minimum Payment",
				"Errors": [
					{
						"NextAction": "Check for Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Amount Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThe entered amount of $$.StoredCustomerInput exceeds the total amount due of $$.Attributes.PaymentAmountDue. Please try again with a smaller amount.\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Too Large",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThe entered amount of $$.StoredCustomerInput is less than the minimum payment of $$.Attributes.PaymentMinimumPayment. Please try again with a larger amount.\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Too Small",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Method Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYour entry was not recognized. Please try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Method Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Check Payment Amount",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Set Payment Amount to Entered Amount",
				"Conditions": [
					{
						"NextAction": "Payment Amount Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					},
					{
						"NextAction": "Payment Too Large",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["$.Attributes.PaymentAmountDue"]
						}
					},
					{
						"NextAction": "Payment Too Small",
						"Condition": {
							"Operator": "NumberLessThan",
							"Operands": ["$.Attributes.PaymentMinimumPayment"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Set Payment Amount to Entered Amount",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Use Payment Method Again Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check Last Payment Method",
				"Errors": [
					{
						"NextAction": "Check Last Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nTo pay with a credit or debit card, press 1.\nTo pay directly with your bank account, press 2.\n</prosody>\n</speak>"
			},
			"Identifier": "Ask for Payment Method",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Method Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Set Payment Method to Card",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Set Payment Method to Bank",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Payment Method Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Method Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Method Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentMethod"
			},
			"Identifier": "Check Last Payment Method",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Use Card Again?",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Card"]
						}
					},
					{
						"NextAction": "Use Bank Account Again?",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Bank"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Amount Choice Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Prompt for Payment Amount Choice",
				"Errors": [
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYour entry was not recognized. Please try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Amount Choice Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Prompt for Payment Amount Choice",
				"Errors": [
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentMinimumPayment"
			},
			"Identifier": "Check for Minimum Payment",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["PaymentAmountDue"]
						}
					},
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["0"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYou are permitted to make a partial payment of at least $$.Attributes.PaymentMinimumPayment.\n</prosody>\n</speak>"
			},
			"Identifier": "Speak Minimum Payment",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Payment Amount",
				"Errors": [
					{
						"NextAction": "Get Payment Amount",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nTo pay the amount in full, press 1.\nTo pay a partial amount, press 2.\n</prosody>\n</speak>"
			},
			"Identifier": "Prompt for Payment Amount Choice",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Amount Choice Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Set Payment Amount to Full Amount",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Speak Minimum Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Amount Choice Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Amount Choice Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Amount Choice Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Bank"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Bank",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Account Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Card"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Card",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Card Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Routing Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThere was a problem with your bank routing number. Please check your entry and try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Try Routing Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Expiration Date Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThere was a problem with your expiration date. Please check your entry and try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Try Expiration Date Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nPlease enter your card's expiration date in the format month-month-year-year, followed by the pound key when complete.\n</prosody>\n</speak>",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				}
			},
			"Identifier": "Get Expiration Date",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Expiration Date Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Expiration Date Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.Email"
			},
			"Identifier": "Check for Customer Email",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Has Specified Receipt Queue",
				"Conditions": [
					{
						"NextAction": "Send Receipt",
						"Condition": {
							"Operator": "TextContains",
							"Operands": ["@"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Has Specified Receipt Queue",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"EncryptedAccountNumber": "REDACTED",
					"ExpirationDate": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes Copy",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Set Queue",
				"Errors": [
					{
						"NextAction": "Set Queue",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.FlowAttributes.ReceiptQueueId"
			},
			"Identifier": "Has Specified Receipt Queue",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask to Transfer for Receipt",
				"Conditions": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask to Transfer for Receipt",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAre you still there?\n</prosody>\n</speak>"
			},
			"Identifier": "Receipt Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask to Transfer for Receipt",
				"Errors": [
					{
						"NextAction": "Ask to Transfer for Receipt",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYour entry was not recognized. Please try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Receipt Entry Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask to Transfer for Receipt",
				"Errors": [
					{
						"NextAction": "Ask to Transfer for Receipt",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nTo transfer to a representative and receive a receipt for your payment, press 1.\nTo continue without a receipt, press 2.\n</prosody>\n</speak>"
			},
			"Identifier": "Ask to Transfer for Receipt",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Receipt Entry Not Recognized",
				"Conditions": [
					{
						"NextAction": "Redact Sensitive Contact Attributes Copy",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Receipt Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Receipt Entry Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Receipt Entry Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nA receipt has been sent to your email address, $.Attributes.['Email'].\n</prosody>\n</speak>"
			},
			"Identifier": "Receipt Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendReceiptLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Send Receipt",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Success",
				"Errors": [
					{
						"NextAction": "Receipt Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThere was an error sending the receipt to your email address, $.Attributes.['Email']. Please contact customer support to receive a receipt for this transaction.\n</prosody>\n</speak>"
			},
			"Identifier": "Receipt Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "a3ea896e-4f43-4677-8edd-159f677dc41e",
			"Type": "EndFlowModuleExecution",
			"Transitions": {}
		},
		{
			"Parameters": {},
			"Identifier": "Transfer to Representative",
			"Type": "TransferContactToQueue",
			"Transitions": {
				"NextAction": "Transfer Error",
				"Errors": [
					{
						"NextAction": "Transfer Error",
						"ErrorType": "QueueAtCapacity"
					},
					{
						"NextAction": "Transfer Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"QueueId": "$.FlowAttributes.ReceiptQueueId"
			},
			"Identifier": "Set Queue",
			"Type": "UpdateContactTargetQueue",
			"Transitions": {
				"NextAction": "Transfer to Representative",
				"Errors": [
					{
						"NextAction": "Transfer Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nAn error prevented us from connecting you to a representative. Please try calling the customer service number directly in order to receive a receipt.\n</prosody>\n</speak>"
			},
			"Identifier": "Transfer Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
				"Errors": [
					{
						"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"FlowLoggingBehavior": "Disabled"
			},
			"Identifier": "87859db2-400d-410b-8818-05c8ae4869aa",
			"Type": "UpdateFlowLoggingBehavior",
			"Transitions": {
				"NextAction": "Set Receipt Queue ID"
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<createPaymentRequestLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Create Payment Request",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Payment Request ID",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"FlowAttributes": {
					"ReceiptQueueId": {
						"Value": "<<receiptQueueId>>"
					}
				}
			},
			"Identifier": "Set Receipt Queue ID",
			"Type": "UpdateFlowAttributes",
			"Transitions": {
				"NextAction": "Create Payment Request",
				"Errors": [
					{
						"NextAction": "Create Payment Request",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Card Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Validate Card Number",
				"Conditions": [
					{
						"NextAction": "Card Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Validate Card Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\n$.External.ValidationError\n\nPlease check your entry and try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Card Number Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<validateEntryLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"ValidationType": "CardNumber",
					"CustomerEntry": "$.StoredCustomerInput"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Validate Card Number",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Card Number Validation Error",
				"Errors": [
					{
						"NextAction": "Store Encrypted Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.ValidationError"
			},
			"Identifier": "Check for Card Number Validation Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Card Number Validation Error",
				"Conditions": [
					{
						"NextAction": "Store Encrypted Card Number",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Card Number Validation Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Account Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Validate Account Number",
				"Conditions": [
					{
						"NextAction": "Account Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Validate Account Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\n$.External.ValidationError\n\nPlease check your entry and try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Account Number Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nPlease enter your bank's routing number, followed by the pound key when complete.\n</prosody>\n</speak>",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				}
			},
			"Identifier": "Get Routing Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Routing Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Routing Number Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<validateEntryLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"ValidationType": "AccountNumber",
					"CustomerEntry": "$.StoredCustomerInput"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Validate Account Number",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Account Number Validation Error",
				"Errors": [
					{
						"NextAction": "Store Encrypted Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.ValidationError"
			},
			"Identifier": "Check for Account Number Validation Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Account Number Validation Error",
				"Conditions": [
					{
						"NextAction": "Store Encrypted Account Number",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Account Number Validation Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\n$.External.ValidationError\n\nPlease check your entry and try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Routing Number Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Routing Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Validate Routing Number",
				"Conditions": [
					{
						"NextAction": "Routing Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Validate Routing Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.ValidationError"
			},
			"Identifier": "Check for Routing Number Validation Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Routing Number Validation Error",
				"Conditions": [
					{
						"NextAction": "Store Routing Number",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Routing Number Validation Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<validateEntryLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"ValidationType": "RoutingNumber",
					"CustomerEntry": "$.StoredCustomerInput"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Validate Routing Number",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Routing Number Validation Error",
				"Errors": [
					{
						"NextAction": "Store Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\n$.External.ValidationError\n\nPlease check your entry and try again.\n</prosody>\n</speak>"
			},
			"Identifier": "Expiration Date Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Expiration Date Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Validate Expiration Date",
				"Conditions": [
					{
						"NextAction": "Expiration Date Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Validate Expiration Date",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.ValidationError"
			},
			"Identifier": "Check for Expiration Date Validation Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Expiration Date Validation Error",
				"Conditions": [
					{
						"NextAction": "Store Expiration Date",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Expiration Date Validation Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<validateEntryLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"ValidationType": "ExpirationDate",
					"CustomerEntry": "$.StoredCustomerInput"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Validate Expiration Date",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Expiration Date Validation Error",
				"Errors": [
					{
						"NextAction": "Store Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nPlease enter the amount you would like to pay in whole dollars, followed by the pound key.\n</prosody>\n</speak>",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				}
			},
			"Identifier": "Get Payment Amount",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Check Payment Amount",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentAmount": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Amount to Entered Amount",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Check Last Payment Method",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentAmount": "$.Customer.Attributes.PaymentAmountDue"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Amount to Full Amount",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Check Last Payment Method",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nPlease enter your bank account number followed by the pound key when complete.\n</prosody>\n</speak>",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Account Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Account Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nPlease enter your card number followed by the pound key when complete.\n</prosody>\n</speak>",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "25"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Card Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Card Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"EncryptedAccountNumber": "REDACTED",
					"ExpirationDate": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
				"Errors": [
					{
						"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Card Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedAccountNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Account Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"RoutingNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Routing Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"ExpirationDate": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Expiration Date",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nWe're sorry, an error has occurred that prevents us from collecting the payment.\n</prosody>\n</speak>"
			},
			"Identifier": "Internal Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThe payment failed because of the following error:\n\n$.External.Error\n</prosody>\n</speak>"
			},
			"Identifier": "Speak Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.Error"
			},
			"Identifier": "Check for Tokenize Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Speak Validation Error",
				"Conditions": [
					{
						"NextAction": "Record Token",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Speak Validation Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYour payment was processed successfully.\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Customer Email",
				"Errors": [
					{
						"NextAction": "Check for Customer Email",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<tokenizeTransactionLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Tokenize Transaction",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Tokenize Error",
				"Errors": [
					{
						"NextAction": "Payment Validation Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThere was a problem validating your $.Attributes.PaymentMethod information.\n</prosody>\n</speak>"
			},
			"Identifier": "Payment Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"TransactionId": "$.External.TransactionId",
					"PaymentMethodEndingDigits": "$.External.PaymentMethodEndingDigits",
					"TransactionIds": "$.External.TransactionIds"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Transaction Attributes",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Payment Success",
				"Errors": [
					{
						"NextAction": "Payment Success",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThe payment failed to submit because of the following error:\n\n$.External.Error\n\nYou have not been charged.\n</prosody>\n</speak>"
			},
			"Identifier": "Speak Payment Submission Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYou previously paid with a credit or debit card ending in <say-as interpret-as=\"digits\">$.Attributes.PaymentMethodEndingDigits</say-as>.\n\nIf you would like to use this card again for this payment, press 1.\nTo use a different payment method, press 2.\n</prosody>\n</speak>"
			},
			"Identifier": "Use Card Again?",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Submit Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Use Payment Method Again Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nYou previously paid with a bank account ending in <say-as interpret-as=\"digits\">$.Attributes.PaymentMethodEndingDigits</say-as>.\n\nIf you would like to use this account again for this payment, press 1.\nTo use a different payment method, press 2.\n</prosody>\n</speak>"
			},
			"Identifier": "Use Bank Account Again?",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Submit Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Use Payment Method Again Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "$.External.PaymentToken"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Token",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Submit Payment",
				"Errors": [
					{
						"NextAction": "Submit Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.External.Error"
			},
			"Identifier": "Check for Submit Payment Error",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Speak Payment Submission Error",
				"Conditions": [
					{
						"NextAction": "Record Transaction Attributes",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["NULL"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Speak Payment Submission Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "NULL",
					"PaymentMethod": "NULL"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Remove Failed Payment Token and Method",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<submitPaymentLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Submit Payment",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Check for Submit Payment Error",
				"Errors": [
					{
						"NextAction": "Speak Payment Submission Unknown Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "<speak>\n<prosody volume=\"<<speakingVolume>>\" rate=\"<<speakingRate>>\">\nThe payment failed to submit because of an unknown error.\n</prosody>\n</speak>"
			},
			"Identifier": "Speak Payment Submission Unknown Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Remove Failed Payment Token and Method",
				"Errors": [
					{
						"NextAction": "Remove Failed Payment Token and Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		}
	],
	"Settings": {
		"InputParameters": [],
		"OutputParameters": [],
		"Transitions": [
			{
				"DisplayName": "Success",
				"ReferenceName": "Success",
				"Description": ""
			},
			{
				"DisplayName": "Error",
				"ReferenceName": "Error",
				"Description": ""
			}
		]
	}
}
