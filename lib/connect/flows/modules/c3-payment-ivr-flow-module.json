{
	"Version": "2019-10-30",
	"StartAction": "87859db2-400d-410b-8818-05c8ae4869aa",
	"Metadata": {
		"entryPointPosition": {
			"x": -600,
			"y": 56
		},
		"ActionMetadata": {
			"Record Transaction ID": {
				"position": {
					"x": 5784,
					"y": -148.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Try Routing Number Again": {
				"position": {
					"x": 3880.8,
					"y": 355.2
				},
				"isFriendlyName": true
			},
			"Account Number Timeout": {
				"position": {
					"x": 2944,
					"y": -92.8
				},
				"isFriendlyName": true
			},
			"Account Number Timeout Check": {
				"position": {
					"x": 3188.8,
					"y": -72.8
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "98a6d4bd-503a-4904-9df4-12975b22a1b3",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Routing Number Timeout": {
				"position": {
					"x": 3752,
					"y": -92
				},
				"isFriendlyName": true
			},
			"Get Routing Number": {
				"position": {
					"x": 3841.6,
					"y": 131.2
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Expiration Date Timeout": {
				"position": {
					"x": 3833.6,
					"y": -1106.4
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout Check": {
				"position": {
					"x": 3996,
					"y": -147.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "949626b2-abd9-4b83-9e88-15427f7c763d",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"b2786200-e897-45bd-b888-0f53246f72ed": {
				"position": {
					"x": 321.6,
					"y": 360.8
				}
			},
			"Payment Amount Timeout": {
				"position": {
					"x": 992,
					"y": -728
				},
				"isFriendlyName": true
			},
			"Payment Too Large": {
				"position": {
					"x": 1284,
					"y": -763.2
				},
				"isFriendlyName": true
			},
			"Check Payment Amount": {
				"position": {
					"x": 1155.2,
					"y": -505.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "4a8d3af0-1939-4eee-8f46-624a2bb275ae",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					},
					{
						"id": "4b379276-5be0-4fdf-b784-2fd4f588dc90",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "$.Attributes.PaymentAmountDue"
					},
					{
						"id": "6d630637-6427-4574-b2ec-f9f289bb1e4d",
						"operator": {
							"name": "Is less than",
							"value": "LessThan",
							"shortDisplay": "<"
						},
						"value": "$.Attributes.PaymentMinimumPayment"
					}
				]
			},
			"Payment Too Small": {
				"position": {
					"x": 1524,
					"y": -765.6
				},
				"isFriendlyName": true
			},
			"Amount Choice Timeout": {
				"position": {
					"x": 388,
					"y": -498.4
				},
				"isFriendlyName": true
			},
			"Amount Choice Input Not Recognized": {
				"position": {
					"x": 654.4,
					"y": -511.2
				},
				"isFriendlyName": true
			},
			"Speak Minimum Payment": {
				"position": {
					"x": 900,
					"y": -208.8
				},
				"isFriendlyName": true
			},
			"Try Expiration Date Again": {
				"position": {
					"x": 3930.4,
					"y": -487.2
				},
				"isFriendlyName": true
			},
			"Payment Success": {
				"position": {
					"x": 6239.2,
					"y": -44.8
				},
				"isFriendlyName": true
			},
			"Card Number Timeout": {
				"position": {
					"x": 2892,
					"y": -1114.4
				},
				"isFriendlyName": true
			},
			"Get Expiration Date": {
				"position": {
					"x": 3867.2,
					"y": -702.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Card Number Timeout Check": {
				"position": {
					"x": 3020.8,
					"y": -892
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "0aa69d9b-4c77-4e5c-ad90-14dd7b696d5d",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Email Receipt": {
				"position": {
					"x": 6702.4,
					"y": -43.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<emailReceiptLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Expiration Date Timeout Check": {
				"position": {
					"x": 3968.8,
					"y": -901.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "30a5cd99-7862-445e-81cb-f73771b0f8a7",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Payment Method Timeout": {
				"position": {
					"x": 2208.8,
					"y": -266.4
				},
				"isFriendlyName": true
			},
			"Method Input Not Recognized": {
				"position": {
					"x": 2427.2,
					"y": -340
				},
				"isFriendlyName": true
			},
			"Prompt for Payment Amount Choice": {
				"position": {
					"x": 591.2,
					"y": -212
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "47a30d1d-053f-4684-9186-cd85576eda56",
						"value": "1"
					},
					{
						"id": "2b5a66a2-0763-4b5e-82af-367ddfab3804",
						"value": "2"
					}
				]
			},
			"Record Token": {
				"position": {
					"x": 5117.6,
					"y": -128
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Payment Request Error": {
				"position": {
					"x": 78.4,
					"y": 361.6
				},
				"isFriendlyName": true
			},
			"Check for Minimum Payment": {
				"position": {
					"x": 347.2,
					"y": -20
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "7e07868a-de8f-41a9-a31f-90fa4bbe1755",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "PaymentAmountDue"
					},
					{
						"id": "3cf4cc75-f949-4bf8-a6ec-fb885846720e",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "0"
					}
				]
			},
			"Record Payment Request ID": {
				"position": {
					"x": -186.4,
					"y": -20.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Speak Amount": {
				"position": {
					"x": 109.6,
					"y": -28
				},
				"isFriendlyName": true
			},
			"Store Encrypted Account Number": {
				"position": {
					"x": 3212.8,
					"y": 131.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedAccountNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedAccountNumber"]
			},
			"Get Payment Amount": {
				"position": {
					"x": 1131.2,
					"y": -220
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Store Encrypted Card Number": {
				"position": {
					"x": 3148,
					"y": -687.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedCardNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedCardNumber"]
			},
			"Set Payment Amount": {
				"position": {
					"x": 1523.2,
					"y": -206.4
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"PaymentAmount": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["PaymentAmount"]
			},
			"Store Routing Number": {
				"position": {
					"x": 4120,
					"y": 112
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"RoutingNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["RoutingNumber"]
			},
			"Store Expiration Date": {
				"position": {
					"x": 4127.2,
					"y": -695.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"ExpirationDate": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["ExpirationDate"]
			},
			"Get & Encrypt Account Number": {
				"position": {
					"x": 2976,
					"y": 114.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Set Payment Method to Bank": {
				"position": {
					"x": 2748.8,
					"y": 111.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Tokenize Transaction": {
				"position": {
					"x": 4880,
					"y": -132.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<tokenizeTransactionLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Submit Payment": {
				"position": {
					"x": 5554.4,
					"y": -130.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<submitPaymentLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"a3ea896e-4f43-4677-8edd-159f677dc41e": {
				"position": {
					"x": 7818.4,
					"y": 192.8
				}
			},
			"Receipt Success": {
				"position": {
					"x": 6922.4,
					"y": -128
				},
				"isFriendlyName": true
			},
			"Check for Customer Email": {
				"position": {
					"x": 6460.8,
					"y": -43.2
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "368f0232-d197-4ba8-bfbd-d2df74f9d9bb",
						"operator": {
							"name": "Contains",
							"value": "Contains",
							"shortDisplay": "contains"
						},
						"value": "@"
					}
				]
			},
			"Receipt Error": {
				"position": {
					"x": 7143.2,
					"y": 55.2
				},
				"isFriendlyName": true
			},
			"Internal Error": {
				"position": {
					"x": 2660,
					"y": 525.6
				},
				"isFriendlyName": true
			},
			"Payment Validation Error": {
				"position": {
					"x": 5786.4,
					"y": 273.6
				},
				"isFriendlyName": true
			},
			"Payment Submission Error": {
				"position": {
					"x": 6017.6,
					"y": 159.2
				},
				"isFriendlyName": true
			},
			"Redact Sensitive Contact Attributes": {
				"position": {
					"x": 7378.4,
					"y": 184
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Get & Encrypt Card Number": {
				"position": {
					"x": 2899.2,
					"y": -692.8
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Ask for Payment Method": {
				"position": {
					"x": 2230.4,
					"y": -29.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "930e5109-52f2-4d20-9753-194234246127",
						"value": "1"
					},
					{
						"id": "05c47c1d-50f0-47f0-bc55-4f1247d48465",
						"value": "2"
					}
				]
			},
			"Set Payment Method to Card": {
				"position": {
					"x": 2675.2,
					"y": -697.6
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Create Payment Request": {
				"position": {
					"x": -413.6,
					"y": 50.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<createPaymentRequestLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"87859db2-400d-410b-8818-05c8ae4869aa": {
				"position": {
					"x": -558.4,
					"y": 306.4
				}
			}
		},
		"Annotations": [],
		"name": "C3 Payment IVR Flow Module",
		"description": "Flow module to collect payments through a self-service IVR using C3.",
		"status": "published",
		"hash": {}
	},
	"Actions": [
		{
			"Parameters": {
				"Attributes": {
					"TransactionId": "$.External.TransactionId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Transaction ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Payment Success",
				"Errors": [
					{
						"NextAction": "Payment Success",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your routing number. Please try again."
			},
			"Identifier": "Try Routing Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Account Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Account Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Account Number",
				"Conditions": [
					{
						"NextAction": "Account Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Account Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Routing Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank's routing number, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "9"
					}
				}
			},
			"Identifier": "Get Routing Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Routing Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Routing Number Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Expiration Date Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Routing Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Routing Number",
				"Conditions": [
					{
						"NextAction": "Routing Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Routing Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "b2786200-e897-45bd-b888-0f53246f72ed",
			"Type": "EndFlowModuleExecution",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Payment Amount Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "The entered amount of $$.StoredCustomerInput exceeds the total amount due of $$.Attributes.PaymentAmountDue. Please try again with a smaller amount."
			},
			"Identifier": "Payment Too Large",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Check Payment Amount",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Set Payment Amount",
				"Conditions": [
					{
						"NextAction": "Payment Amount Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					},
					{
						"NextAction": "Payment Too Large",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["$.Attributes.PaymentAmountDue"]
						}
					},
					{
						"NextAction": "Payment Too Small",
						"Condition": {
							"Operator": "NumberLessThan",
							"Operands": ["$.Attributes.PaymentMinimumPayment"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Set Payment Amount",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "The entered amount of $$.StoredCustomerInput is less than the minimum payment of $$.Attributes.PaymentMinimumPayment. Please try again with a larger amount."
			},
			"Identifier": "Payment Too Small",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Minimum Payment",
				"Errors": [
					{
						"NextAction": "Speak Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Amount Choice Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Prompt for Payment Amount Choice",
				"Errors": [
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your input was not recognized. Please try again."
			},
			"Identifier": "Amount Choice Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Prompt for Payment Amount Choice",
				"Errors": [
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "You are permitted to make a partial payment of at least $$.Attributes.PaymentMinimumPayment."
			},
			"Identifier": "Speak Minimum Payment",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Payment Amount",
				"Errors": [
					{
						"NextAction": "Get Payment Amount",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your expiration date. Please try again."
			},
			"Identifier": "Try Expiration Date Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your payment was processed successfully."
			},
			"Identifier": "Payment Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Customer Email",
				"Errors": [
					{
						"NextAction": "Check for Customer Email",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Card Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "Please enter your card's expiration date, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "4"
					}
				}
			},
			"Identifier": "Get Expiration Date",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Expiration Date Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Expiration Date Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Card Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Card Number",
				"Conditions": [
					{
						"NextAction": "Card Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Card Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<emailReceiptLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Email Receipt",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Success",
				"Errors": [
					{
						"NextAction": "Receipt Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Expiration Date Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Expiration Date",
				"Conditions": [
					{
						"NextAction": "Expiration Date Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Expiration Date",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Payment Method Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your input was not recognized. Please try again."
			},
			"Identifier": "Method Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To pay the amount in full, press 1.\nTo pay a partial amount, press 2."
			},
			"Identifier": "Prompt for Payment Amount Choice",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Amount Choice Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Speak Minimum Payment",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Amount Choice Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Amount Choice Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Amount Choice Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "$.External.PaymentToken"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Token",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Submit Payment",
				"Errors": [
					{
						"NextAction": "Submit Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error creating the payment request."
			},
			"Identifier": "Payment Request Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "b2786200-e897-45bd-b888-0f53246f72ed",
				"Errors": [
					{
						"NextAction": "b2786200-e897-45bd-b888-0f53246f72ed",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentMinimumPayment"
			},
			"Identifier": "Check for Minimum Payment",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Conditions": [
					{
						"NextAction": "Ask for Payment Method",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["PaymentAmountDue"]
						}
					},
					{
						"NextAction": "Prompt for Payment Amount Choice",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["0"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentRequestId": "$.External.PaymentRequestId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Payment Request ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Speak Amount",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "A payment has been requested for the amount of $$.Attributes.PaymentAmountDue."
			},
			"Identifier": "Speak Amount",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Minimum Payment",
				"Errors": [
					{
						"NextAction": "Check for Minimum Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedAccountNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Account Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "Please enter the amount you would like to pay in whole dollars, followed by the pound key.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				}
			},
			"Identifier": "Get Payment Amount",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Check Payment Amount",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Card Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentAmount": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Amount",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"RoutingNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Routing Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"ExpirationDate": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Expiration Date",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank account number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Account Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Account Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Bank"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Bank",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<tokenizeTransactionLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Tokenize Transaction",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Token",
				"Errors": [
					{
						"NextAction": "Payment Validation Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<submitPaymentLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Submit Payment",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Transaction ID",
				"Errors": [
					{
						"NextAction": "Payment Submission Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "a3ea896e-4f43-4677-8edd-159f677dc41e",
			"Type": "EndFlowModuleExecution",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "A receipt has been sent to your email address at $.Attributes.['Email']."
			},
			"Identifier": "Receipt Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.Email"
			},
			"Identifier": "Check for Customer Email",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Conditions": [
					{
						"NextAction": "Email Receipt",
						"Condition": {
							"Operator": "TextContains",
							"Operands": ["@"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error sending the receipt to your email address at $.Attributes.['Email']. Please contact customer support to receive a receipt for this transaction."
			},
			"Identifier": "Receipt Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occured that prevents us from collecting the payment."
			},
			"Identifier": "Internal Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem validating your $.Attributes.PaymentMethod information."
			},
			"Identifier": "Payment Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occured preventing us from submitting your payment. You have not been charged."
			},
			"Identifier": "Payment Submission Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"ExpirationDate": "REDACTED",
					"EncryptedAccountNumber": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
				"Errors": [
					{
						"NextAction": "a3ea896e-4f43-4677-8edd-159f677dc41e",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your card number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Card Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Card Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To pay with a credit card, press 1.\nTo pay directly with your bank account, press 2."
			},
			"Identifier": "Ask for Payment Method",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Method Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Set Payment Method to Card",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Set Payment Method to Bank",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Payment Method Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Method Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Method Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Card"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Card",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<createPaymentRequestLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Create Payment Request",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Payment Request ID",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"FlowLoggingBehavior": "Disabled"
			},
			"Identifier": "87859db2-400d-410b-8818-05c8ae4869aa",
			"Type": "UpdateFlowLoggingBehavior",
			"Transitions": {
				"NextAction": "Create Payment Request"
			}
		}
	],
	"Settings": {
		"InputParameters": [],
		"OutputParameters": [],
		"Transitions": [
			{
				"DisplayName": "Success",
				"ReferenceName": "Success",
				"Description": ""
			},
			{
				"DisplayName": "Error",
				"ReferenceName": "Error",
				"Description": ""
			}
		]
	}
}
