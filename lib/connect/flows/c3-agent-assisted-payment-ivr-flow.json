{
	"Version": "2019-10-30",
	"StartAction": "773c7dfc-3423-47e4-bf80-be55b0cd1947",
	"Metadata": {
		"entryPointPosition": {
			"x": -2100,
			"y": 660.8
		},
		"ActionMetadata": {
			"Agent Placed On Hold": {
				"position": {
					"x": -112.8,
					"y": 544.8
				},
				"isFriendlyName": true
			},
			"Try Expiration Date Again": {
				"position": {
					"x": 2589.6,
					"y": 28
				},
				"isFriendlyName": true
			},
			"Try Routing Number Again": {
				"position": {
					"x": 2540,
					"y": 870.4
				},
				"isFriendlyName": true
			},
			"5a505241-be5a-4437-8d66-785eb1b0beca": {
				"position": {
					"x": 6692,
					"y": 696
				}
			},
			"Card Number Timeout": {
				"position": {
					"x": 1551.2,
					"y": -599.2
				},
				"isFriendlyName": true
			},
			"Account Number Timeout": {
				"position": {
					"x": 1603.2,
					"y": 422.4
				},
				"isFriendlyName": true
			},
			"Account Number Timeout Check": {
				"position": {
					"x": 1848,
					"y": 442.4
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "3c5624a2-37bf-49c2-ab6b-1c964738c286",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Card Number Timeout Check": {
				"position": {
					"x": 1680,
					"y": -376.8
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "cc2db572-4fb8-4692-82e7-06e5495570cb",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Expiration Date Timeout": {
				"position": {
					"x": 2492.8,
					"y": -591.2
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout": {
				"position": {
					"x": 2411.2,
					"y": 423.2
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout Check": {
				"position": {
					"x": 2656.8,
					"y": 369.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "f049374a-6a2a-414a-bbe4-80d5704af598",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Expiration Date Timeout Check": {
				"position": {
					"x": 2625.6,
					"y": -388
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "3f4248fa-094f-40b0-926e-af452d75285e",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Get Expiration Date": {
				"position": {
					"x": 2526.4,
					"y": -187.2
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Report Card Number Entered": {
				"position": {
					"x": 2044.8,
					"y": -172
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Get Routing Number": {
				"position": {
					"x": 2500.8,
					"y": 646.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Report Account Number Entered": {
				"position": {
					"x": 2090.4,
					"y": 639.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Store Encrypted Card Number": {
				"position": {
					"x": 1807.2,
					"y": -172
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedCardNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedCardNumber"]
			},
			"Store Encrypted Account Number": {
				"position": {
					"x": 1872,
					"y": 646.4
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedAccountNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedAccountNumber"]
			},
			"Report Expiration Entered": {
				"position": {
					"x": 3006.4,
					"y": -184.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Store Expiration Date": {
				"position": {
					"x": 2786.4,
					"y": -180
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"ExpirationDate": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["ExpirationDate"]
			},
			"Report Routing Number Entered": {
				"position": {
					"x": 3012.8,
					"y": 614.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Store Routing Number": {
				"position": {
					"x": 2779.2,
					"y": 627.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"RoutingNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["RoutingNumber"]
			},
			"Record Token": {
				"position": {
					"x": 3776.8,
					"y": 387.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Report Payment Tokenized": {
				"position": {
					"x": 3997.6,
					"y": 384
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Payment Success": {
				"position": {
					"x": 4898.4,
					"y": 470.4
				},
				"isFriendlyName": true
			},
			"Record Transaction ID": {
				"position": {
					"x": 4443.2,
					"y": 366.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Report Payment Processed": {
				"position": {
					"x": 4673.6,
					"y": 367.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Email Receipt": {
				"position": {
					"x": 5361.6,
					"y": 472
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<emailReceiptLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Report Receipt Email Error": {
				"position": {
					"x": 5592,
					"y": 569.6
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Submit Payment": {
				"position": {
					"x": 4213.6,
					"y": 384.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<submitPaymentLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Report Payment Submission Error": {
				"position": {
					"x": 4445.6,
					"y": 672.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Tokenize Transaction": {
				"position": {
					"x": 3539.2,
					"y": 382.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<tokenizeTransactionLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Report Tokenization Error": {
				"position": {
					"x": 3896,
					"y": 845.6
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Receipt Success": {
				"position": {
					"x": 5581.6,
					"y": 387.2
				},
				"isFriendlyName": true
			},
			"Check for Customer Email": {
				"position": {
					"x": 5120,
					"y": 472
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "074f3b9c-a5a7-4ae1-868d-28b310c32540",
						"operator": {
							"name": "Contains",
							"value": "Contains",
							"shortDisplay": "contains"
						},
						"value": "@"
					}
				]
			},
			"Receipt Error": {
				"position": {
					"x": 5805.6,
					"y": 572.8
				},
				"isFriendlyName": true
			},
			"Payment Submission Error": {
				"position": {
					"x": 4680,
					"y": 677.6
				},
				"isFriendlyName": true
			},
			"Payment Validation Error": {
				"position": {
					"x": 4134.4,
					"y": 841.6
				},
				"isFriendlyName": true
			},
			"Report Credit Card Selected": {
				"position": {
					"x": 1324,
					"y": -180
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Speak Amount": {
				"position": {
					"x": 200.8,
					"y": 540.8
				},
				"isFriendlyName": true
			},
			"Input Not Recognized": {
				"position": {
					"x": 610.4,
					"y": 86.4
				},
				"isFriendlyName": true
			},
			"Payment Method Timeout": {
				"position": {
					"x": 375.2,
					"y": 170.4
				},
				"isFriendlyName": true
			},
			"Set Payment Method to Card": {
				"position": {
					"x": 1037.6,
					"y": -178.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Report Bank Account Selected": {
				"position": {
					"x": 1376,
					"y": 584
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Ask for Payment Method": {
				"position": {
					"x": 438.4,
					"y": 501.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "03e81dbf-5579-41d3-8fac-0762865675c8",
						"value": "1"
					},
					{
						"id": "662c24fa-935d-4b29-90e8-02e0ffbed05c",
						"value": "2"
					}
				]
			},
			"Set Payment Method to Bank": {
				"position": {
					"x": 1055.2,
					"y": 572.8
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"90dc6a63-2ae9-4c5f-b65f-75348779d0c6": {
				"position": {
					"x": 6472.8,
					"y": 689.6
				}
			},
			"Redact Sensitive Contact Attributes": {
				"position": {
					"x": 6037.6,
					"y": 699.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Returning To Agent": {
				"position": {
					"x": 6256.8,
					"y": 695.2
				},
				"isFriendlyName": true
			},
			"Report Card Number Encryption Error": {
				"position": {
					"x": 1846.4,
					"y": 50.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Report Account Number Encryption Error": {
				"position": {
					"x": 1996.8,
					"y": 875.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Report Expiration Date Error": {
				"position": {
					"x": 2881.6,
					"y": 34.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Report Routing Number Error": {
				"position": {
					"x": 2796,
					"y": 848
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Get & Encrypt Account Number": {
				"position": {
					"x": 1635.2,
					"y": 629.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Get & Encrypt Card Number": {
				"position": {
					"x": 1558.4,
					"y": -177.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Internal Error": {
				"position": {
					"x": 1321.6,
					"y": 1040.8
				},
				"isFriendlyName": true
			},
			"Report Customer Transferred": {
				"position": {
					"x": -340,
					"y": 544.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Record Payment Request ID": {
				"position": {
					"x": -1339.2,
					"y": 493.6
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Payment Request Error": {
				"position": {
					"x": -1139.2,
					"y": 792.8
				},
				"isFriendlyName": true
			},
			"Report Payment Request Error": {
				"position": {
					"x": -1352,
					"y": 790.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"773c7dfc-3423-47e4-bf80-be55b0cd1947": {
				"position": {
					"x": -2127.2,
					"y": 948
				}
			},
			"Create Payment Request": {
				"position": {
					"x": -1566.4,
					"y": 564.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<createPaymentRequestLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"No Payment Information": {
				"position": {
					"x": -1135.2,
					"y": 992.8
				},
				"isFriendlyName": true
			},
			"Check for Entered Info": {
				"position": {
					"x": -1963.2,
					"y": 642.4
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "07133f8d-7297-46d6-911c-a9214004da43",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "0"
					}
				]
			},
			"Report No Payment Info Error": {
				"position": {
					"x": -1363.2,
					"y": 998.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"c584fdb0-1a54-4203-a33d-ae533419b8dc": {
				"position": {
					"x": -568,
					"y": 540
				}
			},
			"33d2c563-289f-4358-9500-fc1552cc9523": {
				"position": {
					"x": -280,
					"y": 940.8
				}
			},
			"Agent Hold Error": {
				"position": {
					"x": -556.8,
					"y": 749.6
				},
				"isFriendlyName": true
			}
		},
		"Annotations": [],
		"name": "C3 Agent-Assisted Payment IVR",
		"description": "Flow for collecting payments with C3 through a quick connect IVR.",
		"type": "queueTransfer",
		"status": "published",
		"hash": {}
	},
	"Actions": [
		{
			"Parameters": {
				"Text": "To ensure the security of your information, the agent has been temporarily placed on hold."
			},
			"Identifier": "Agent Placed On Hold",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Amount",
				"Errors": [
					{
						"NextAction": "Speak Amount",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your expiration date. Please try again."
			},
			"Identifier": "Try Expiration Date Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your routing number. Please try again."
			},
			"Identifier": "Try Routing Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "5a505241-be5a-4437-8d66-785eb1b0beca",
			"Type": "DisconnectParticipant",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Card Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Account Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Account Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Account Number",
				"Conditions": [
					{
						"NextAction": "Account Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Account Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Card Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Card Number",
				"Conditions": [
					{
						"NextAction": "Card Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Card Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Expiration Date Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Routing Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Routing Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Routing Number",
				"Conditions": [
					{
						"NextAction": "Routing Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Routing Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Expiration Date Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Expiration Date",
				"Conditions": [
					{
						"NextAction": "Expiration Date Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Expiration Date",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "Please enter your card's expiration date, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "4"
					}
				}
			},
			"Identifier": "Get Expiration Date",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Expiration Date Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Expiration Date Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "CardNumberEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Card Number Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank's routing number, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "9"
					}
				}
			},
			"Identifier": "Get Routing Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Routing Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Routing Number Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "AccountNumberEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Account Number Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Card Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Card Number Entered",
				"Errors": [
					{
						"NextAction": "Report Card Number Encryption Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedAccountNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Account Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Account Number Entered",
				"Errors": [
					{
						"NextAction": "Report Account Number Encryption Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "ExpirationDateEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Expiration Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Tokenize Transaction",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"ExpirationDate": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Expiration Date",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Expiration Entered",
				"Errors": [
					{
						"NextAction": "Report Expiration Date Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "RoutingNumberEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Routing Number Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Tokenize Transaction",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"RoutingNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Routing Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Routing Number Entered",
				"Errors": [
					{
						"NextAction": "Report Routing Number Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "$.External.PaymentToken"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Token",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Payment Tokenized",
				"Errors": [
					{
						"NextAction": "Report Payment Tokenized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentTokenized"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Tokenized",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Submit Payment",
				"Errors": [
					{
						"NextAction": "Submit Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your payment was processed successfully."
			},
			"Identifier": "Payment Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Customer Email",
				"Errors": [
					{
						"NextAction": "Check for Customer Email",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"TransactionId": "$.External.TransactionId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Transaction ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Payment Processed",
				"Errors": [
					{
						"NextAction": "Report Payment Processed",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentProcessed"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Processed",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Payment Success",
				"Errors": [
					{
						"NextAction": "Payment Success",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<emailReceiptLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Email Receipt",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Success",
				"Errors": [
					{
						"NextAction": "Report Receipt Email Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "ReceiptEmailError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Receipt Email Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Error",
				"Errors": [
					{
						"NextAction": "Receipt Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<submitPaymentLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Submit Payment",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Transaction ID",
				"Errors": [
					{
						"NextAction": "Report Payment Submission Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentSubmissionError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Submission Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Payment Submission Error",
				"Errors": [
					{
						"NextAction": "Payment Submission Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<tokenizeTransactionLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Tokenize Transaction",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Token",
				"Errors": [
					{
						"NextAction": "Report Tokenization Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "TokenizationError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Tokenization Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Payment Validation Error",
				"Errors": [
					{
						"NextAction": "Payment Validation Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "A receipt has been sent to your email address at $.Attributes.['Email']."
			},
			"Identifier": "Receipt Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.Email"
			},
			"Identifier": "Check for Customer Email",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Conditions": [
					{
						"NextAction": "Email Receipt",
						"Condition": {
							"Operator": "TextContains",
							"Operands": ["@"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error sending the receipt to your email address at $.Attributes.['Email']. Please contact customer support to receive a receipt for this transaction."
			},
			"Identifier": "Receipt Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occured preventing us from submitting your payment. You have not been charged."
			},
			"Identifier": "Payment Submission Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem validating your $.Attributes.PaymentMethod information."
			},
			"Identifier": "Payment Validation Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "CreditCardSelected"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Credit Card Selected",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "A payment has been requested for the amount of $$.Attributes.PaymentAmount."
			},
			"Identifier": "Speak Amount",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your input was not recognized. Please try again."
			},
			"Identifier": "Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Payment Method Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Card"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Card",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Credit Card Selected",
				"Errors": [
					{
						"NextAction": "Report Credit Card Selected",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "BankAccountSelected"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Bank Account Selected",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To pay with a credit card, press 1.\nTo pay directly with your bank account, press 2."
			},
			"Identifier": "Ask for Payment Method",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Set Payment Method to Card",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Set Payment Method to Bank",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Payment Method Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentMethod": "Bank"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Set Payment Method to Bank",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Bank Account Selected",
				"Errors": [
					{
						"NextAction": "Report Bank Account Selected",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"PreviousContactParticipantState": "OffHold"
			},
			"Identifier": "90dc6a63-2ae9-4c5f-b65f-75348779d0c6",
			"Type": "UpdatePreviousContactParticipantState",
			"Transitions": {
				"NextAction": "5a505241-be5a-4437-8d66-785eb1b0beca",
				"Errors": [
					{
						"NextAction": "5a505241-be5a-4437-8d66-785eb1b0beca",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"ExpirationDate": "REDACTED",
					"EncryptedAccountNumber": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Returning To Agent",
				"Errors": [
					{
						"NextAction": "Returning To Agent",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Returning you to the agent..."
			},
			"Identifier": "Returning To Agent",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "90dc6a63-2ae9-4c5f-b65f-75348779d0c6",
				"Errors": [
					{
						"NextAction": "90dc6a63-2ae9-4c5f-b65f-75348779d0c6",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "CardNumberEncryptionError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Card Number Encryption Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "AccountNumberEncryptionError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Account Number Encryption Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "ExpirationDateError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Expiration Date Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "RoutingNumberError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Routing Number Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank account number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Account Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Account Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your card number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Card Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Card Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occured that prevents us from collecting the payment."
			},
			"Identifier": "Internal Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Returning To Agent",
				"Errors": [
					{
						"NextAction": "Returning To Agent",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "IVRStarted"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Customer Transferred",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Agent Placed On Hold",
				"Errors": [
					{
						"NextAction": "Agent Placed On Hold",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentRequestId": "$.External.PaymentRequestId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Payment Request ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "c584fdb0-1a54-4203-a33d-ae533419b8dc",
				"Errors": [
					{
						"NextAction": "Report Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error creating the payment request."
			},
			"Identifier": "Payment Request Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
				"Errors": [
					{
						"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentRequestError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Request Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Payment Request Error",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"FlowLoggingBehavior": "Disabled"
			},
			"Identifier": "773c7dfc-3423-47e4-bf80-be55b0cd1947",
			"Type": "UpdateFlowLoggingBehavior",
			"Transitions": {
				"NextAction": "Check for Entered Info"
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<createPaymentRequestLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Create Payment Request",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Payment Request ID",
				"Errors": [
					{
						"NextAction": "Report Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There's no payment information for this contact. Please fill out the information in the C3 Payment Request app and try again."
			},
			"Identifier": "No Payment Information",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
				"Errors": [
					{
						"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentAmount"
			},
			"Identifier": "Check for Entered Info",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Report No Payment Info Error",
				"Conditions": [
					{
						"NextAction": "Create Payment Request",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["0"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Report No Payment Info Error",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "NoPaymentInfoError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report No Payment Info Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "No Payment Information",
				"Errors": [
					{
						"NextAction": "No Payment Information",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"PreviousContactParticipantState": "AgentOnHold"
			},
			"Identifier": "c584fdb0-1a54-4203-a33d-ae533419b8dc",
			"Type": "UpdatePreviousContactParticipantState",
			"Transitions": {
				"NextAction": "Report Customer Transferred",
				"Errors": [
					{
						"NextAction": "Agent Hold Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "33d2c563-289f-4358-9500-fc1552cc9523",
			"Type": "DisconnectParticipant",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "There was an error placing the agent on hold. Unable to request payment."
			},
			"Identifier": "Agent Hold Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
				"Errors": [
					{
						"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		}
	]
}
