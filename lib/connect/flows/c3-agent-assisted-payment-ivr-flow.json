{
	"Version": "2019-10-30",
	"StartAction": "773c7dfc-3423-47e4-bf80-be55b0cd1947",
	"Metadata": {
		"entryPointPosition": {
			"x": -2100,
			"y": 660.8
		},
		"ActionMetadata": {
			"91520f17-df03-49f4-a47b-041f36642323": {
				"position": {
					"x": 1383.2,
					"y": 1282.4
				}
			},
			"Try Expiration Date Again": {
				"position": {
					"x": 2138.4,
					"y": 44
				},
				"isFriendlyName": true
			},
			"Try Routing Number Again": {
				"position": {
					"x": 2088.8,
					"y": 886.4
				},
				"isFriendlyName": true
			},
			"Try Account Number Again": {
				"position": {
					"x": 1237.6,
					"y": 864.8
				},
				"isFriendlyName": true
			},
			"90dc6a63-2ae9-4c5f-b65f-75348779d0c6": {
				"position": {
					"x": 6021.6,
					"y": 705.6
				}
			},
			"5a505241-be5a-4437-8d66-785eb1b0beca": {
				"position": {
					"x": 6240.8,
					"y": 712
				}
			},
			"Returning To Agent": {
				"position": {
					"x": 5800.8,
					"y": 712.8
				},
				"isFriendlyName": true
			},
			"33d2c563-289f-4358-9500-fc1552cc9523": {
				"position": {
					"x": -360,
					"y": 939.2
				}
			},
			"Receipt Success": {
				"position": {
					"x": 5130.4,
					"y": 403.2
				},
				"isFriendlyName": true
			},
			"Try Card Number Again": {
				"position": {
					"x": 1167.2,
					"y": 63.2
				},
				"isFriendlyName": true
			},
			"87c99ef0-15ba-43b9-9354-ffc116e7a1f1": {
				"position": {
					"x": 1091.2,
					"y": 1276
				}
			},
			"Card Number Timeout": {
				"position": {
					"x": 1100,
					"y": -583.2
				},
				"isFriendlyName": true
			},
			"Account Number Timeout": {
				"position": {
					"x": 1152,
					"y": 438.4
				},
				"isFriendlyName": true
			},
			"Account Number Timeout Check": {
				"position": {
					"x": 1396.8,
					"y": 458.4
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "434c7e29-26fa-4809-9ddd-38fcad6943aa",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Card Number Timeout Check": {
				"position": {
					"x": 1228.8,
					"y": -360.8
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "8c7779be-1531-4ae1-9e59-0aacb001cd34",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Expiration Date Timeout": {
				"position": {
					"x": 2041.6,
					"y": -575.2
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout": {
				"position": {
					"x": 1960,
					"y": 439.2
				},
				"isFriendlyName": true
			},
			"Routing Number Timeout Check": {
				"position": {
					"x": 2205.6,
					"y": 385.6
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "f2fda71b-91ed-4a66-912f-5569ee4d3928",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Expiration Date Timeout Check": {
				"position": {
					"x": 2174.4,
					"y": -372
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "06b2c81d-1c11-43f3-88ab-5ae46ec02fd6",
						"operator": {
							"name": "Equals",
							"value": "Equals",
							"shortDisplay": "="
						},
						"value": "Timeout"
					}
				]
			},
			"Redact Sensitive Contact Attributes": {
				"position": {
					"x": 5586.4,
					"y": 715.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Check for Customer Email": {
				"position": {
					"x": 4668.8,
					"y": 488
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "722ac4ed-2631-4f0a-ab3b-127e1fa1d030",
						"operator": {
							"name": "Contains",
							"value": "Contains",
							"shortDisplay": "contains"
						},
						"value": "@"
					}
				]
			},
			"Speak Amount": {
				"position": {
					"x": 200.8,
					"y": 540.8
				},
				"isFriendlyName": true
			},
			"Input Not Recognized": {
				"position": {
					"x": 610.4,
					"y": 86.4
				},
				"isFriendlyName": true
			},
			"Payment Method Timeout": {
				"position": {
					"x": 375.2,
					"y": 170.4
				},
				"isFriendlyName": true
			},
			"773c7dfc-3423-47e4-bf80-be55b0cd1947": {
				"position": {
					"x": -2127.2,
					"y": 948
				}
			},
			"No Payment Information": {
				"position": {
					"x": -1535.2,
					"y": 1180.8
				},
				"isFriendlyName": true
			},
			"Check for Entered Info": {
				"position": {
					"x": -1963.2,
					"y": 642.4
				},
				"isFriendlyName": true,
				"conditions": [],
				"conditionMetadata": [
					{
						"id": "bc2bcad8-5f81-4e9a-a3ab-d470cbc1af73",
						"operator": {
							"name": "Is greater than",
							"value": "GreaterThan",
							"shortDisplay": ">"
						},
						"value": "0"
					}
				]
			},
			"Agent Hold Error": {
				"position": {
					"x": -586.4,
					"y": 770.4
				},
				"isFriendlyName": true
			},
			"Payment Request Error": {
				"position": {
					"x": -1074.4,
					"y": 876
				},
				"isFriendlyName": true
			},
			"Create Payment Request": {
				"position": {
					"x": -1566.4,
					"y": 564.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<createPaymentRequestLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Record Payment Request ID": {
				"position": {
					"x": -1339.2,
					"y": 493.6
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Report Payment Request Error": {
				"position": {
					"x": -1302.4,
					"y": 726.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Agent Placed On Hold": {
				"position": {
					"x": -112.8,
					"y": 544.8
				},
				"isFriendlyName": true
			},
			"c584fdb0-1a54-4203-a33d-ae533419b8dc": {
				"position": {
					"x": -567.2,
					"y": 557.6
				}
			},
			"Report Customer Transferred": {
				"position": {
					"x": -340,
					"y": 544.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Get & Encrypt Card Number": {
				"position": {
					"x": 1107.2,
					"y": -161.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Report Credit Card Selected": {
				"position": {
					"x": 872.8,
					"y": -164
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Get & Encrypt Account Number": {
				"position": {
					"x": 1184,
					"y": 645.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Ask for Payment Method": {
				"position": {
					"x": 438.4,
					"y": 501.6
				},
				"isFriendlyName": true,
				"conditionMetadata": [
					{
						"id": "283954d5-d97d-43cc-8b91-65edc8216353",
						"value": "1"
					},
					{
						"id": "093a51f8-4be3-4161-9cad-fc5c4b366b22",
						"value": "2"
					}
				]
			},
			"Report Bank Account Selected": {
				"position": {
					"x": 924.8,
					"y": 600
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Get Expiration Date": {
				"position": {
					"x": 2075.2,
					"y": -171.2
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Report Card Number Entered": {
				"position": {
					"x": 1593.6,
					"y": -156
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Get Routing Number": {
				"position": {
					"x": 2049.6,
					"y": 662.4
				},
				"isFriendlyName": true,
				"conditionMetadata": [],
				"countryCodePrefix": "+1"
			},
			"Report Account Number Entered": {
				"position": {
					"x": 1639.2,
					"y": 655.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Store Encrypted Card Number": {
				"position": {
					"x": 1356,
					"y": -156
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedCardNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedCardNumber"]
			},
			"Report Card Number Encryption Error": {
				"position": {
					"x": 1395.2,
					"y": 66.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Store Encrypted Account Number": {
				"position": {
					"x": 1420.8,
					"y": 662.4
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"EncryptedAccountNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["EncryptedAccountNumber"]
			},
			"Report Account Number Encryption Error": {
				"position": {
					"x": 1545.6,
					"y": 891.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Report Expiration Entered": {
				"position": {
					"x": 2555.2,
					"y": -168.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Store Expiration Date": {
				"position": {
					"x": 2335.2,
					"y": -164
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"ExpirationDate": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["ExpirationDate"]
			},
			"Report Expiration Date Error": {
				"position": {
					"x": 2430.4,
					"y": 50.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Report Routing Number Entered": {
				"position": {
					"x": 2561.6,
					"y": 630.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Internal Error": {
				"position": {
					"x": 871.2,
					"y": 1058.4
				},
				"isFriendlyName": true
			},
			"Store Routing Number": {
				"position": {
					"x": 2328,
					"y": 643.2
				},
				"isFriendlyName": true,
				"parameters": {
					"Attributes": {
						"RoutingNumber": {
							"useDynamic": true
						}
					}
				},
				"dynamicParams": ["RoutingNumber"]
			},
			"Report Routing Number Error": {
				"position": {
					"x": 2344.8,
					"y": 864
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Record Token": {
				"position": {
					"x": 3325.6,
					"y": 403.2
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Report Payment Tokenized": {
				"position": {
					"x": 3546.4,
					"y": 400
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"DEBUG Tokenize Error": {
				"position": {
					"x": 3995.2,
					"y": 805.6
				},
				"isFriendlyName": true
			},
			"Tokenize Transaction": {
				"position": {
					"x": 3088,
					"y": 398.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<tokenizeTransactionLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Report Tokenization Error": {
				"position": {
					"x": 3445.6,
					"y": 800.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"DEBUG Submit Payment Error": {
				"position": {
					"x": 4228.8,
					"y": 693.6
				},
				"isFriendlyName": true
			},
			"Submit Payment": {
				"position": {
					"x": 3762.4,
					"y": 400.8
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<submitPaymentLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Report Payment Submission Error": {
				"position": {
					"x": 3987.2,
					"y": 586.4
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Payment Success": {
				"position": {
					"x": 4447.2,
					"y": 486.4
				},
				"isFriendlyName": true
			},
			"Record Transaction ID": {
				"position": {
					"x": 3992,
					"y": 382.4
				},
				"isFriendlyName": true,
				"dynamicParams": []
			},
			"Report Payment Processed": {
				"position": {
					"x": 4222.4,
					"y": 383.2
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			},
			"Receipt Error": {
				"position": {
					"x": 5354.4,
					"y": 588.8
				},
				"isFriendlyName": true
			},
			"Email Receipt": {
				"position": {
					"x": 4910.4,
					"y": 488
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<emailReceiptLambdaArn>>"
					}
				},
				"dynamicMetadata": {}
			},
			"Report Receipt Email Error": {
				"position": {
					"x": 5140.8,
					"y": 585.6
				},
				"isFriendlyName": true,
				"parameters": {
					"LambdaFunctionARN": {
						"displayName": "<<sendAgentMessageLambdaArn>>"
					}
				},
				"dynamicMetadata": {
					"EventText": false
				}
			}
		},
		"Annotations": [],
		"name": "C3 Agent-Assisted Payment IVR",
		"description": "Flow for collecting payments with C3 through a quick connect IVR.",
		"type": "queueTransfer",
		"status": "published",
		"hash": {}
	},
	"Actions": [
		{
			"Parameters": {},
			"Identifier": "91520f17-df03-49f4-a47b-041f36642323",
			"Type": "DisconnectParticipant",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your expiration date. Please try again."
			},
			"Identifier": "Try Expiration Date Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your routing number. Please try again."
			},
			"Identifier": "Try Routing Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your account number. Please try again."
			},
			"Identifier": "Try Account Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"PreviousContactParticipantState": "OffHold"
			},
			"Identifier": "90dc6a63-2ae9-4c5f-b65f-75348779d0c6",
			"Type": "UpdatePreviousContactParticipantState",
			"Transitions": {
				"NextAction": "5a505241-be5a-4437-8d66-785eb1b0beca",
				"Errors": [
					{
						"NextAction": "5a505241-be5a-4437-8d66-785eb1b0beca",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "5a505241-be5a-4437-8d66-785eb1b0beca",
			"Type": "DisconnectParticipant",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "Returning you to the agent..."
			},
			"Identifier": "Returning To Agent",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "90dc6a63-2ae9-4c5f-b65f-75348779d0c6",
				"Errors": [
					{
						"NextAction": "90dc6a63-2ae9-4c5f-b65f-75348779d0c6",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {},
			"Identifier": "33d2c563-289f-4358-9500-fc1552cc9523",
			"Type": "DisconnectParticipant",
			"Transitions": {}
		},
		{
			"Parameters": {
				"Text": "A receipt has been sent to your email address at $.Attributes.['Email']."
			},
			"Identifier": "Receipt Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was a problem with your card number. Please try again."
			},
			"Identifier": "Try Card Number Again",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"PreviousContactParticipantState": "OffHold"
			},
			"Identifier": "87c99ef0-15ba-43b9-9354-ffc116e7a1f1",
			"Type": "UpdatePreviousContactParticipantState",
			"Transitions": {
				"NextAction": "91520f17-df03-49f4-a47b-041f36642323",
				"Errors": [
					{
						"NextAction": "91520f17-df03-49f4-a47b-041f36642323",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Card Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Account Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Account Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Account Number",
				"Conditions": [
					{
						"NextAction": "Account Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Account Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Card Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Encrypted Card Number",
				"Conditions": [
					{
						"NextAction": "Card Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Encrypted Card Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Expiration Date Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Routing Number Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Routing Number Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Routing Number",
				"Conditions": [
					{
						"NextAction": "Routing Number Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Routing Number",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.StoredCustomerInput"
			},
			"Identifier": "Expiration Date Timeout Check",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Store Expiration Date",
				"Conditions": [
					{
						"NextAction": "Expiration Date Timeout",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["Timeout"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Store Expiration Date",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "REDACTED",
					"ExpirationDate": "REDACTED",
					"EncryptedAccountNumber": "REDACTED"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Redact Sensitive Contact Attributes",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Returning To Agent",
				"Errors": [
					{
						"NextAction": "Returning To Agent",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.Email"
			},
			"Identifier": "Check for Customer Email",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Conditions": [
					{
						"NextAction": "Email Receipt",
						"Condition": {
							"Operator": "TextContains",
							"Operands": ["@"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "A payment has been requested for the amount of $$.Attributes.PaymentAmount."
			},
			"Identifier": "Speak Amount",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your input was not recognized. Please try again."
			},
			"Identifier": "Input Not Recognized",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Are you still there?"
			},
			"Identifier": "Payment Method Timeout",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Ask for Payment Method",
				"Errors": [
					{
						"NextAction": "Ask for Payment Method",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"FlowLoggingBehavior": "Enabled"
			},
			"Identifier": "773c7dfc-3423-47e4-bf80-be55b0cd1947",
			"Type": "UpdateFlowLoggingBehavior",
			"Transitions": {
				"NextAction": "Check for Entered Info"
			}
		},
		{
			"Parameters": {
				"Text": "There's no payment information for this contact. Please fill out the information in the C3 Payment Request app and try again."
			},
			"Identifier": "No Payment Information",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "87c99ef0-15ba-43b9-9354-ffc116e7a1f1",
				"Errors": [
					{
						"NextAction": "87c99ef0-15ba-43b9-9354-ffc116e7a1f1",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"ComparisonValue": "$.Attributes.PaymentAmount"
			},
			"Identifier": "Check for Entered Info",
			"Type": "Compare",
			"Transitions": {
				"NextAction": "No Payment Information",
				"Conditions": [
					{
						"NextAction": "Create Payment Request",
						"Condition": {
							"Operator": "NumberGreaterThan",
							"Operands": ["0"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "No Payment Information",
						"ErrorType": "NoMatchingCondition"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error placing the agent on hold. Unable to request payment."
			},
			"Identifier": "Agent Hold Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
				"Errors": [
					{
						"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error creating the payment request."
			},
			"Identifier": "Payment Request Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
				"Errors": [
					{
						"NextAction": "33d2c563-289f-4358-9500-fc1552cc9523",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<createPaymentRequestLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Create Payment Request",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Payment Request ID",
				"Errors": [
					{
						"NextAction": "Report Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentRequestId": "$.External.PaymentRequestId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Payment Request ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "c584fdb0-1a54-4203-a33d-ae533419b8dc",
				"Errors": [
					{
						"NextAction": "Report Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentRequestError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Request Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Payment Request Error",
				"Errors": [
					{
						"NextAction": "Payment Request Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "To ensure the security of your information, the agent has been temporarily placed on hold."
			},
			"Identifier": "Agent Placed On Hold",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Speak Amount",
				"Errors": [
					{
						"NextAction": "Speak Amount",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"PreviousContactParticipantState": "AgentOnHold"
			},
			"Identifier": "c584fdb0-1a54-4203-a33d-ae533419b8dc",
			"Type": "UpdatePreviousContactParticipantState",
			"Transitions": {
				"NextAction": "Report Customer Transferred",
				"Errors": [
					{
						"NextAction": "Agent Hold Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "IVRStarted"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Customer Transferred",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Agent Placed On Hold",
				"Errors": [
					{
						"NextAction": "Agent Placed On Hold",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your card number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Card Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Card Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "CreditCardSelected"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Credit Card Selected",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get & Encrypt Card Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Card Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank account number followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "20"
					}
				},
				"InputEncryption": {
					"EncryptionKeyId": "<<amazonConnectSecurityKeyId>>",
					"Key": "<<amazonConnectSecurityKeyCertificateContent>>"
				}
			},
			"Identifier": "Get & Encrypt Account Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Account Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "False",
				"InputTimeLimitSeconds": "5",
				"Text": "To pay with a credit card, press 1.\nTo pay directly with your bank account, press 2."
			},
			"Identifier": "Ask for Payment Method",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Input Not Recognized",
				"Conditions": [
					{
						"NextAction": "Report Credit Card Selected",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["1"]
						}
					},
					{
						"NextAction": "Report Bank Account Selected",
						"Condition": {
							"Operator": "Equals",
							"Operands": ["2"]
						}
					}
				],
				"Errors": [
					{
						"NextAction": "Payment Method Timeout",
						"ErrorType": "InputTimeLimitExceeded"
					},
					{
						"NextAction": "Input Not Recognized",
						"ErrorType": "NoMatchingCondition"
					},
					{
						"NextAction": "Input Not Recognized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "BankAccountSelected"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Bank Account Selected",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get & Encrypt Account Number",
				"Errors": [
					{
						"NextAction": "Get & Encrypt Account Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "5",
				"Text": "Please enter your card's expiration date, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "4"
					}
				}
			},
			"Identifier": "Get Expiration Date",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Expiration Date Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Expiration Date Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "CardNumberEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Card Number Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get Expiration Date",
				"Errors": [
					{
						"NextAction": "Get Expiration Date",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"StoreInput": "True",
				"InputTimeLimitSeconds": "10",
				"Text": "Please enter your bank's routing number, followed by the pound key when complete.",
				"DTMFConfiguration": {
					"DisableCancelKey": "False",
					"InputTerminationSequence": "#"
				},
				"InputValidation": {
					"CustomValidation": {
						"MaximumLength": "9"
					}
				}
			},
			"Identifier": "Get Routing Number",
			"Type": "GetParticipantInput",
			"Transitions": {
				"NextAction": "Routing Number Timeout Check",
				"Errors": [
					{
						"NextAction": "Try Routing Number Again",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "AccountNumberEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Account Number Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Get Routing Number",
				"Errors": [
					{
						"NextAction": "Get Routing Number",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedCardNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Card Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Card Number Entered",
				"Errors": [
					{
						"NextAction": "Report Card Number Encryption Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "CardNumberEncryptionError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Card Number Encryption Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"EncryptedAccountNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Encrypted Account Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Account Number Entered",
				"Errors": [
					{
						"NextAction": "Report Account Number Encryption Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "AccountNumberEncryptionError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Account Number Encryption Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "ExpirationDateEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Expiration Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Tokenize Transaction",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"ExpirationDate": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Expiration Date",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Expiration Entered",
				"Errors": [
					{
						"NextAction": "Report Expiration Date Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "ExpirationDateError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Expiration Date Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "RoutingNumberEntered"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Routing Number Entered",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Tokenize Transaction",
				"Errors": [
					{
						"NextAction": "Tokenize Transaction",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "We're sorry, an error has occured that prevents us from collecting the payment. Returning you back to the agent."
			},
			"Identifier": "Internal Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "87c99ef0-15ba-43b9-9354-ffc116e7a1f1",
				"Errors": [
					{
						"NextAction": "87c99ef0-15ba-43b9-9354-ffc116e7a1f1",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"RoutingNumber": "$.StoredCustomerInput"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Store Routing Number",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Routing Number Entered",
				"Errors": [
					{
						"NextAction": "Report Routing Number Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "RoutingNumberError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Routing Number Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Internal Error",
				"Errors": [
					{
						"NextAction": "Internal Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"PaymentToken": "$.External.PaymentToken"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Token",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Payment Tokenized",
				"Errors": [
					{
						"NextAction": "Report Payment Tokenized",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentTokenized"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Tokenized",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Submit Payment",
				"Errors": [
					{
						"NextAction": "Submit Payment",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error during tokenization. Please check the debug logs."
			},
			"Identifier": "DEBUG Tokenize Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<tokenizeTransactionLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Tokenize Transaction",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Token",
				"Errors": [
					{
						"NextAction": "Report Tokenization Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "TokenizationError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Tokenization Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "DEBUG Tokenize Error",
				"Errors": [
					{
						"NextAction": "DEBUG Tokenize Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error submitting the payment. Please check the debug logs."
			},
			"Identifier": "DEBUG Submit Payment Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<submitPaymentLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Submit Payment",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Record Transaction ID",
				"Errors": [
					{
						"NextAction": "Report Payment Submission Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentSubmissionError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Submission Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "DEBUG Submit Payment Error",
				"Errors": [
					{
						"NextAction": "DEBUG Submit Payment Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "Your payment was processed successfully."
			},
			"Identifier": "Payment Success",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Check for Customer Email",
				"Errors": [
					{
						"NextAction": "Check for Customer Email",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Attributes": {
					"TransactionId": "$.External.TransactionId"
				},
				"TargetContact": "Current"
			},
			"Identifier": "Record Transaction ID",
			"Type": "UpdateContactAttributes",
			"Transitions": {
				"NextAction": "Report Payment Processed",
				"Errors": [
					{
						"NextAction": "Report Payment Processed",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "PaymentProcessed"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Payment Processed",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Payment Success",
				"Errors": [
					{
						"NextAction": "Payment Success",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"Text": "There was an error sending the receipt to your email address at $.Attributes.['Email']. Please contact customer support to receive a receipt for this transaction."
			},
			"Identifier": "Receipt Error",
			"Type": "MessageParticipant",
			"Transitions": {
				"NextAction": "Redact Sensitive Contact Attributes",
				"Errors": [
					{
						"NextAction": "Redact Sensitive Contact Attributes",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<emailReceiptLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Email Receipt",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Success",
				"Errors": [
					{
						"NextAction": "Report Receipt Email Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		},
		{
			"Parameters": {
				"LambdaFunctionARN": "<<sendAgentMessageLambdaArn>>",
				"InvocationTimeLimitSeconds": "8",
				"LambdaInvocationAttributes": {
					"EventText": "ReceiptEmailError"
				},
				"ResponseValidation": {
					"ResponseType": "JSON"
				}
			},
			"Identifier": "Report Receipt Email Error",
			"Type": "InvokeLambdaFunction",
			"Transitions": {
				"NextAction": "Receipt Error",
				"Errors": [
					{
						"NextAction": "Receipt Error",
						"ErrorType": "NoMatchingError"
					}
				]
			}
		}
	]
}
